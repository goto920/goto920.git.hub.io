{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","toDoListSaved","JSON","parse","localStorage","getItem","state","toDoList","title","description","deadline","sortBy","filter","handleChange","bind","handleAddItem","editItem","handleCalendar","setSort","setFilter","toDoListDisplay","this","x","status","sort","a","b","creation","toDoListUI","map","item","index","array","key","Date","toLocaleString","name","value","onClick","className","type","placeholder","required","onChange","cols","calendarType","setState","e","target","getTime","now","newItem","newList","setItem","stringify","alert","parseInt","findIndex","splice","React","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"2SAuKeA,E,kDAjKb,WAAYC,GAAO,IAAD,sBAChB,eAEA,IAAMC,EACFC,KAAKC,MAAMC,aAAaC,QAAQ,cAAgB,GAJpC,OAMhB,EAAKC,MAAQ,CACXC,SAAWN,EACXO,MAAO,GACPC,YAAa,GACbC,SAAU,KACVC,OAAQ,QACRC,OAAQ,QAGV,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,cAAgB,EAAKA,cAAcD,KAAnB,gBACrB,EAAKE,SAAW,EAAKA,SAASF,KAAd,gBAChB,EAAKG,eAAiB,EAAKA,eAAeH,KAApB,gBACtB,EAAKI,QAAU,EAAKA,QAAQJ,KAAb,gBACf,EAAKK,UAAY,EAAKA,UAAUL,KAAf,gBApBD,E,qDAwBP,IAAD,OAEJM,EAAkBC,KAAKf,MAAMC,SAEjC,OAAQc,KAAKf,MAAMM,QACjB,IAAK,SACHQ,EAAkBA,EAAgBR,QAAO,SAAAU,GAAC,MAAiB,WAAbA,EAAEC,UAClD,MACA,IAAK,OACHH,EAAkBA,EAAgBR,QAAO,SAAAU,GAAC,MAAiB,SAAbA,EAAEC,UAIpD,OAAQF,KAAKf,MAAMK,QACjB,IAAK,QACHS,EAAgBI,MAAK,SAACC,EAAEC,GAAH,OAASD,EAAEE,SAAWD,EAAEC,YAC/C,MACA,IAAK,SACHP,EAAgBI,MAAK,SAACC,EAAEC,GAAH,OAASA,EAAEC,SAAWF,EAAEE,YAC/C,MACA,IAAK,QACHP,EAAgBI,MAAK,SAACC,EAAEC,GAAH,OAASD,EAAEf,SAAWgB,EAAEhB,YAC/C,MACA,IAAK,SACHU,EAAgBI,MAAK,SAACC,EAAEC,GAAH,OAASA,EAAEhB,SAAWe,EAAEf,YAKjD,IAAMkB,EAAaR,EAAgBS,KAAI,SAACC,EAAKC,EAAMC,GAAZ,OACtC,yBAAKC,IAAKF,GACTA,EADD,YACiBD,EAAKtB,MAAM,6BAD5B,WAESsB,EAAKP,OAFd,IAEsB,6BAFtB,gBAGcO,EAAKrB,YAAY,6BAH/B,aAIW,IAAIyB,KAAKJ,EAAKH,UAAUQ,iBAAiB,6BAJpD,aAKW,IAAID,KAAKJ,EAAKpB,UAAUyB,iBAAiB,6BACpD,4BAAQC,KAAK,OAAOC,MAAOP,EAAKH,SAC5BW,QAAS,EAAKtB,UADlB,QAEA,4BAAQoB,KAAK,SAASC,MAAOP,EAAKH,SAC9BW,QAAS,EAAKtB,UADlB,UAED,iCAIA,OACC,yBAAKuB,UAAU,OAAf,IAAsB,6BAAtB,cAEA,2BAAOC,KAAK,OAAOJ,KAAK,QAAQK,YAAY,QAC1CJ,MAAOhB,KAAKf,MAAME,MAClBkC,UAAQ,EAACC,SAAUtB,KAAKR,eAAgB,6BAJ1C,gBAKa,6BACZ,8BAAUuB,KAAK,cACdC,MAAOhB,KAAKf,MAAMG,YAClBgC,YAAY,cAAcG,KAAK,KAC/BD,SAAUtB,KAAKR,eAAgB,6BACjC,kBAAC,IAAD,CAAUgC,aAAa,KACpBF,SAAUtB,KAAKJ,eAAgBoB,MAAOhB,KAAKf,MAAMI,WACpD,4BAAQ0B,KAAK,MAAME,QAASjB,KAAKN,eAAjC,OAZA,QAaA,6BAbA,UAcO,4BAAQqB,KAAK,SACjBC,MAAOhB,KAAKf,MAAMM,OAAQ+B,SAAUtB,KAAKF,WAC5C,4BAAQkB,MAAM,QAAd,WACA,4BAAQA,MAAM,UAAd,UACA,4BAAQA,MAAM,QAAd,SAlBA,IAmBU,6BAnBV,WAoBQ,4BAAQD,KAAK,OAClBC,MAAOhB,KAAKf,MAAMK,OAAQgC,SAAUtB,KAAKH,SAC5C,4BAAQmB,MAAM,SAAd,iBACA,4BAAQA,MAAM,UAAd,kBACA,4BAAQA,MAAM,SAAd,iBACA,4BAAQA,MAAM,UAAd,mBAEA,6BACCT,K,qCAKWS,GAAQhB,KAAKyB,SAAS,CAACpC,SAAU2B,M,8BACxCU,GAAI1B,KAAKyB,SAAS,CAACnC,OAAQoC,EAAEC,OAAOX,U,gCAClCU,GAAI1B,KAAKyB,SAAS,CAAClC,OAAQmC,EAAEC,OAAOX,U,mCAEjCU,GACW,UAAlBA,EAAEC,OAAOZ,KACVf,KAAKyB,SAAS,CAACtC,MAAQuC,EAAEC,OAAOX,QACN,gBAAlBU,EAAEC,OAAOZ,MACjBf,KAAKyB,SAAS,CAACrC,YAAcsC,EAAEC,OAAOX,U,oCAI7BU,GAEZ,GAAsB,QAAlBA,EAAEC,OAAOZ,KAEb,GAAyB,KAArBf,KAAKf,MAAME,MAAf,CAIA,IAAIE,EAEFA,EAD0B,OAAxBW,KAAKf,MAAMI,SACFW,KAAKf,MAAMI,SAASuC,UAEpBf,KAAKgB,MAAQ,OAE1B,IAAMC,EAAU,CACd3C,MAAOa,KAAKf,MAAME,MAClBC,YAAaY,KAAKf,MAAMG,YACxBkB,SAAUO,KAAKgB,MACfxC,SAAUA,EACVa,OAAQ,UAEVF,KAAKyB,SAAS,CAACtC,MAAO,GAAIC,YAAa,GAAIC,SAAU,OAErD,IAAM0C,EAAO,sBAAO/B,KAAKf,MAAMC,UAAlB,CAA4B4C,IACzC9B,KAAKyB,SAAS,CAACvC,SAAU6C,IAGzBhD,aAAaiD,QAAQ,WAAYnD,KAAKoD,UAAUF,SAtB9CG,MAAM,oB,+BA0BDR,GACP,IAAMpB,EAAW6B,SAAST,EAAEC,OAAOX,OAC7Be,EAAU/B,KAAKf,MAAMC,SACrBwB,EAAQqB,EAAQK,WAAU,SAAA3B,GAAI,OAAIA,EAAKH,WAAaA,KAC5C,IAAVI,IAEkB,WAAlBgB,EAAEC,OAAOZ,KAAoBgB,EAAQM,OAAO3B,EAAM,GAC3B,SAAlBgB,EAAEC,OAAOZ,OAAkBgB,EAAQrB,GAAOR,OAAS,QAE5DF,KAAKyB,SAAS,CAACvC,SAAU6C,IACzBhD,aAAaiD,QAAQ,WAAYnD,KAAKoD,UAAUF,S,GA7JlCO,IAAMC,WCQlBC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBtE,QACfgE,UAAUC,cAAcQ,YAI1BC,QAAQC,IACN,iHAKEZ,GAAUA,EAAOa,UACnBb,EAAOa,SAASR,KAMlBM,QAAQC,IAAI,sCAGRZ,GAAUA,EAAOc,WACnBd,EAAOc,UAAUT,WAO5BU,OAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,MC1FjEC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDYnB,SAAkBrB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIqB,IAAIC,iCAAwB7B,OAAOC,SAAS6B,MACpDC,SAAW/B,OAAOC,SAAS8B,OAIvC,OAGF/B,OAAOgC,iBAAiB,QAAQ,WAC9B,IAAM3B,EAAK,UAAMwB,iCAAN,sBAEP/B,IAgEV,SAAiCO,EAAOC,GAEtC2B,MAAM5B,EAAO,CACX6B,QAAS,CAAE,iBAAkB,YAE5BxB,MAAK,SAAAyB,GAEJ,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAAS3E,QACO,MAAf4E,IAA8D,IAAvCA,EAAYE,QAAQ,cAG5C/B,UAAUC,cAAc+B,MAAM7B,MAAK,SAAAC,GACjCA,EAAa6B,aAAa9B,MAAK,WAC7BV,OAAOC,SAASwC,eAKpBrC,EAAgBC,EAAOC,MAG1Be,OAAM,WACLJ,QAAQC,IACN,oEAvFAwB,CAAwBrC,EAAOC,GAI/BC,UAAUC,cAAc+B,MAAM7B,MAAK,WACjCO,QAAQC,IACN,iHAMJd,EAAgBC,EAAOC,OCjC/BE,K","file":"static/js/main.a74783b6.chunk.js","sourcesContent":["import React from 'react'; \nimport './App.css'; \nimport Calendar from 'react-calendar';\n\nclass App extends React.Component { \n\n  constructor(props){\n    super(); \n\n    const toDoListSaved \n      = JSON.parse(localStorage.getItem('toDoList')) || [];\n\n    this.state = {\n      toDoList : toDoListSaved,\n      title: '',\n      description: '',\n      deadline: null,\n      sortBy: 'c-asc',\n      filter: 'none',\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleAddItem = this.handleAddItem.bind(this);\n    this.editItem = this.editItem.bind(this);\n    this.handleCalendar = this.handleCalendar.bind(this);\n    this.setSort = this.setSort.bind(this);\n    this.setFilter = this.setFilter.bind(this);\n  }\n\n\n  render () { // 描画処理\n\n    let toDoListDisplay = this.state.toDoList;\n    // add filter, sort here \n    switch (this.state.filter) {\n      case 'active':\n        toDoListDisplay = toDoListDisplay.filter(x => x.status === 'active'); \n      break;\n      case 'done':\n        toDoListDisplay = toDoListDisplay.filter(x => x.status === 'done'); \n      break;\n      default:\n    }\n    switch (this.state.sortBy) {\n      case 'c-asc': \n        toDoListDisplay.sort((a,b) => a.creation - b.creation); \n      break;\n      case 'c-desc': \n        toDoListDisplay.sort((a,b) => b.creation - a.creation); \n      break;\n      case 'd-asc': \n        toDoListDisplay.sort((a,b) => a.deadline - b.deadline); \n      break;\n      case 'd-desc': \n        toDoListDisplay.sort((a,b) => b.deadline - a.deadline); \n      break;\n      default:\n    }\n\n    const toDoListUI = toDoListDisplay.map((item,index,array) => \n    (<div key={index}>\n     {index}: Title: {item.title}<br />\n     Status: {item.status} <br />\n     Description: {item.description}<br />\n     Creation: {new Date(item.creation).toLocaleString()}<br />\n     Deadline: {new Date(item.deadline).toLocaleString()}<br />\n     <button name=\"done\" value={item.creation} \n         onClick={this.editItem} >Done</button>\n     <button name=\"delete\" value={item.creation} \n         onClick={this.editItem} >Delete</button>\n    <hr />\n    </div>\n    )); \n\n    return (\n     <div className=\"App\"> <hr />\n     Title: &nbsp;\n     <input type=\"text\" name=\"title\" placeholder=\"title\" \n       value={this.state.title}\n       required onChange={this.handleChange} /><br />\n     Description: <br />\n      <textarea name=\"description\" \n       value={this.state.description}\n       placeholder=\"description\" cols=\"50\"\n       onChange={this.handleChange} /><br />\n     <Calendar calendarType='US'\n        onChange={this.handleCalendar} value={this.state.deadline} />\n     <button name=\"add\" onClick={this.handleAddItem}>Add</button> &nbsp;\n     <hr />\n     Filter <select name=\"filter\" \n        value={this.state.filter} onChange={this.setFilter}>\n     <option value=\"none\">showall</option>\n     <option value=\"active\">active</option>\n     <option value=\"done\">done</option>\n     </select> <br />\n     Sort by <select name=\"sort\" \n        value={this.state.sortBy} onChange={this.setSort}>\n     <option value=\"c-asc\">creation(asc)</option>\n     <option value=\"c-desc\">creation(desc)</option>\n     <option value=\"d-asc\">deadline(asc)</option>\n     <option value=\"d-desc\">deadline(desc)</option>\n     </select>\n     <hr />\n     {toDoListUI}\n     </div>\n    );\n  }\n\n  handleCalendar(value){ this.setState({deadline: value})}\n  setSort(e){ this.setState({sortBy: e.target.value})}\n  setFilter(e){ this.setState({filter: e.target.value})}\n\n  handleChange(e) {\n    if (e.target.name === 'title'){\n       this.setState({title : e.target.value});\n    } else if (e.target.name === 'description'){\n       this.setState({description : e.target.value});\n    }\n  }\n\n  handleAddItem(e) {\n\n    if (e.target.name !== 'add') return;\n\n    if (this.state.title === '') {\n      alert('Title is empty'); return;\n    }\n\n    let deadline;  \n    if (this.state.deadline !== null) \n      deadline = this.state.deadline.getTime();\n    else\n      deadline = Date.now() + 7*24*3600*1000; // default 1 week\n\n    const newItem = {\n      title: this.state.title,\n      description: this.state.description,\n      creation: Date.now(),\n      deadline: deadline,\n      status: 'active'\n    };\n    this.setState({title: \"\", description: \"\", deadline: null});\n\n    const newList = [...this.state.toDoList, newItem];\n    this.setState({toDoList: newList});\n    // console.log(JSON.stringify(this.state.toDoList)); // Bad\n    // console.log(JSON.stringify(newList)); // Good\n    localStorage.setItem('toDoList', JSON.stringify(newList));\n\n  }\n\n  editItem(e){\n    const creation = parseInt(e.target.value);\n    const newList = this.state.toDoList;\n    const index = newList.findIndex(item => item.creation === creation);\n    if (index === 0) return;\n\n    if (e.target.name === 'delete')  newList.splice(index,1);\n    else if (e.target.name === 'done')  newList[index].status = 'done';\n\n    this.setState({toDoList: newList});\n    localStorage.setItem('toDoList', JSON.stringify(newList));\n\n  }\n\n} \n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\nserviceWorker.register();\n"],"sourceRoot":""}