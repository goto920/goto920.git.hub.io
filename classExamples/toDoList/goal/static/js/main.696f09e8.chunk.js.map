{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","state","toDoList","title","description","deadline","Date","handleChange","bind","handleAddItem","setDeadline","todoListUI","this","map","item","index","key","type","value","readOnly","cols","creation","toLocaleString","name","onClick","modifyItem","className","placeholder","required","onChange","e","target","setState","newItem","now","getTime","newList","alert","console","log","React","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.696f09e8.chunk.js","sourcesContent":["import React from 'react'; \nimport './App.css'; \nimport Calendar from 'react-calendar';\n\nclass App extends React.Component { \n\n  constructor(props){\n    super(); \n\n    this.state = {\n      toDoList : [],\n      title: '',\n      description: '',\n      deadline: new Date()\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleAddItem = this.handleAddItem.bind(this);\n    this.setDeadline = this.setDeadline.bind(this);\n  }  \n\n\n  render () {\n\n    let todoListUI = this.state.toDoList.map((item,index) => ( \n       <div key={index}>\n        {index}: <input type=\"text\" \n         value={item.title} readOnly /><br />\n        <textarea readOnly value={item.description} cols=\"50\" /><br />\n        {new Date(item.creation).toLocaleString()}<br />\n        {new Date(item.deadline).toLocaleString()}<br />\n        <button name=\"done\" value={index}\n           onClick={this.modifyItem}>Done</button>&nbsp;\n        <button name=\"delete\" value={index}\n           onClick={this.modifyItem}>Delete</button>&nbsp;\n        <button name=\"edit\" value={index}\n           onClick={this.modifyItem}>Edit</button>\n       <hr />\n       </div>\n    ));\n\n    return (\n     <div className=\"App\"> <hr />\n     Title: &nbsp;\n     <input type=\"text\" name=\"title\" placeholder=\"title\" \n       value={this.state.title}\n       required onChange={this.handleChange} /><br />\n     Description: <br />\n      <textarea name=\"description\" placeholder=\"description\" cols=\"50\"\n       value={this.state.description}\n       onChange={this.handleChange} /><br />\n     Deadline:<div><Calendar name=\"calendar\" \n       onChange={this.setDeadline} \n       value={this.state.deadline}\n       /><br />\n     <button name=\"add\" onClick={this.handleAddItem}>Add</button>\n     <hr />\n     Sort by: <select>\n              <option value=\"c-asc\">creation(asc)</option>\n              <option value=\"c-desc\">creation(desc)</option>\n              <option value=\"d-asc\">deadline(asc)</option>\n              <option value=\"d-desc\">deadline(desc)</option>\n              <option value=\"m-asc\">lastmodified(asc)</option>\n              <option value=\"m-desc\">lastmodified(desc)</option>\n              </select></div>\n     Filter by: \n     <input name=\"filter\" type=\"radio\" value=\"all\" />all\n     <input name=\"filter\" type=\"radio\" value=\"active\" />active\n     <input name=\"filter\" type=\"radio\" value=\"done\" />done\n     <br />\n     <hr />\n     {todoListUI}\n     End\n     <hr />\n     </div>\n    );\n  }\n\n  handleChange(e) {\n    if (e.target.name === 'title'){\n       this.setState({title : e.target.value});\n    } else if (e.target.name === 'description'){\n       this.setState({description : e.target.value});\n    }\n  }\n\n  handleAddItem(e) {\n\n    if (e.target.name !== 'add') return;\n\n    if (this.state.title === '') {\n      alert('Title is empty'); return;\n    }\n\n    let newItem = {\n      title: this.state.title,\n      description: this.state.description,\n      creation: Date.now(),\n      deadline: this.state.deadline.getTime()\n    };\n    this.setState({title: '', description: '', deadline: new Date()});\n\n    let newList = [...this.state.toDoList, newItem];\n    this.setState({toDoList: newList});\n\n/*\n    let message = \n       newItem.title +\"\\n\" + \n       newItem.description +\"\\n\" + newItem.creation;\n       alert(message);\n\n    console.log(this.state.toDoList);\n    let now = new Date(newItem.creation);\n    console.log(now.toLocaleString());\n*/\n  }\n\n  setDeadline(value){\n    this.setState({deadline: value});\n    console.log(value.getTime());\n  }\n\n  modifyItem(e){\n    console.log('name:', e.target.name);\n    console.log('value:', e.target.value);\n  }\n\n} \n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\nserviceWorker.register();\n"],"sourceRoot":""}