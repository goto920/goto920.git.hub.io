{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["audioCtx","gainNode","version","packageJSON","homepage","subversion","slice","window","AudioContext","webkitAudioContext","shifter","App","props","params","filename","undefined","audioBuffer","isPlaying","loop","exportDataL","exportDataR","exportBuffer","save","state","playingAt","timeA","timeB","playSpeed","playPitch","playPitchSemi","playPitchCents","playVolume","startButtonStr","loopButtonStr","saveButtonStr","setState","bind","handleWindowClose","loadFile","handleSpeedSlider","handlePitchSlider","handleTimeSlider","handleVolumeSlider","handlePlay","handleSaveA","handleSaveB","fakeDownload","handleLoop","event","close","createGain","addEventListener","this","removeEventListener","startBStyle","loopBStyle","saveBStyle","duration","color","className","type","name","accept","onChange","min","max","value","Math","round","step","onClick","style","href","target","rel","files","length","totalTime","file","reader","FileReader","onload","e","decodeAudioData","result","error","console","log","err","readAsArrayBuffer","tempo","pitchSemi","pitch","pow","vol","gain","buffer","createBuffer","source","createBufferSource","connect","destination","start","partialAudioBuffer","sampleRate","left","getChannelData","right","subarray","copyToChannel","numberOfChannels","PitchShifter","on","detail","timePlayed","parseFloat","percentagePlayed","disconnect","off","isPlayng","offlineCtx","OfflineAudioContext","parseInt","startRendering","oncomplete","renderedBuffer","outFileName","split","blob","Blob","toWav","saveAs","saverNode","channels","createJavaScriptNode","createScriptProcessor","Float32Array","index","onaudioprocess","inputBuffer","outputBuffer","channel","inputData","outputData","sample","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6a70c9c4.chunk.js","sourcesContent":["import React, { Component } from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport {PitchShifter} from 'soundtouchjs'\nimport packageJSON from '../package.json'\nimport {saveAs} from 'file-saver';\nimport * as toWav from 'audiobuffer-to-wav';\n// import {fetch as fetchPolyfill} from 'whatwg-fetch';\n\nconst version = (packageJSON.homepage + packageJSON.subversion).slice(-10)\nconst homepage = 'https://goto920.github.io/demos/variableplayer/'\n\nwindow.AudioContext = window.AudioContext || window.webkitAudioContext\n\nvar audioCtx;\nvar gainNode;\n// =  audioCtx.createGain()\nvar shifter = null // null\n\nclass App extends Component {\n\n  constructor (props){\n    super(props)\n\n    this.params = {\n      filename: undefined,\n      audioBuffer: undefined,\n      isPlaying: false,\n      loop: false,\n      exportDataL: undefined,\n      exportDataR: undefined,\n      exportBuffer: undefined,\n      save: false\n    }\n\n    this.state = {\n      playingAt: 0,\n      timeA: 0,\n      timeB: 0,\n      playSpeed: 100, // in percent\n      playPitch: 0, // in semi-tone (real value)\n      playPitchSemi: 0, // in semi-tone (integer part)\n      playPitchCents: 0, // percent for one semitone\n      playVolume: 80, // in percent\n      startButtonStr: 'loadFile!', \n      loopButtonStr: 'LoopAB',\n      saveButtonStr: 'Save'\n    }\n\n    this.setState = this.setState.bind(this)\n    this.handleWindowClose = this.handleWindowClose.bind(this)\n    this.loadFile = this.loadFile.bind(this)\n    this.handleSpeedSlider = this.handleSpeedSlider.bind(this)\n    this.handlePitchSlider = this.handlePitchSlider.bind(this)\n    this.handleTimeSlider = this.handleTimeSlider.bind(this)\n    this.handleVolumeSlider = this.handleVolumeSlider.bind(this)\n    this.handlePlay = this.handlePlay.bind(this);\n    this.handleSaveA = this.handleSaveA.bind(this);\n    this.handleSaveB = this.handleSaveB.bind(this);\n    this.fakeDownload = this.fakeDownload.bind(this);\n    this.handleLoop = this.handleLoop.bind(this);\n    \n  } // end constructor\n\n  handleWindowClose(event) { \n    audioCtx.close()\n  }\n\n  componentDidMount () { // after render()\n    audioCtx = new window.AudioContext()\n    gainNode = audioCtx.createGain()\n    window.addEventListener('beforeClosing', this.handleWindowClose)\n  }\n\n  componentWillUnmount () { // before closing app\n    window.removeEventListener('beforeClosing', this.handleWindowClose)\n  }\n\n  render() {\n    const {loadFile, \n           handleSpeedSlider, handlePitchSlider, handleVolumeSlider, \n           handleTimeSlider, handlePlay, handleSaveA, handleSaveB, handleLoop} = this\n    const {playingAt, timeA, timeB,\n           playSpeed, playPitch, playPitchSemi, playPitchCents,\n           playVolume, startButtonStr, loopButtonStr, saveButtonStr} \n           = this.state\n\n    let duration = 0;\n    if (this.params.audioBuffer !== undefined) \n       duration = this.params.audioBuffer.duration\n\n    let startBStyle; \n    if (startButtonStr === 'Pause')\n      startBStyle = {color: 'green'}\n    else  \n      startBStyle = {}\n\n    let loopBStyle; \n    if (loopButtonStr === 'StopLoop')\n      loopBStyle = {color: 'green'}\n    else  \n      loopBStyle = {}\n\n    let saveBStyle; \n    if (saveButtonStr === 'Please Wait!')\n      saveBStyle = {color: 'green'}\n    else  \n      saveBStyle = {}\n\n    return (\n      <div className=\"App\">\n      Variable speed/pitch audio player<br /> \n      with soundtouchjs by KG\n      <hr />\n      Input Audio (local file): <br />\n        <span className='selectFile'>\n        <input type='file' name='loadFile' \n        accept='audio/*' onChange={loadFile} /><br />\n        </span>\n      <hr />\n\n      Speed(%): {playSpeed} <br />\n        <span className='slider'> \n         <center>\n         025<input type='range' name='speedSlider' min='25' max='200'\n         value = {playSpeed} onChange={handleSpeedSlider} />200 \n         </center>\n        </span>\n      <hr />\n      Pitch (semi-tone): {playPitch} <br />\n        <span className='slider'> \n         <center>\n         -12<input type='range' name='pitchSliderSemi' min='-12' max='12'\n         value = {playPitchSemi} onChange={handlePitchSlider} />12<br />\n         -100<input type='range' name='pitchSliderCents' min='-100' max='100'\n         value = {playPitchCents} onChange={handlePitchSlider} />100<br />\n         </center>\n\n        </span>\n      <hr />\n        Time: {Math.round(playingAt)}<br />\n        <span className='slider'> \n        <center>\n        0<input type='range' name='timeSlider'\n        min='0' max={duration}\n        value = {playingAt} step='1'\n        onChange={handleTimeSlider} />\n        {Math.round(duration)}<br />\n        </center>\n        <button name='setA' onClick={handleLoop} >setA</button>\n        : {Math.round(timeA*10)/10} &nbsp;&nbsp;\n        <button name='setB' onClick={handleLoop} >setB</button>\n        : {Math.round(timeB*10)/10}\n        </span>\n        <hr />\n      Volume: {playVolume}<br />\n        <span className='slider'> \n         <center>\n         0<input type='range' name='volumeSlider' min='0' max='150'\n         value = {playVolume} onChange={handleVolumeSlider} />150<br />\n         </center>\n        </span>\n      <hr />\n\n      <span>\n        <button name='startPause' onClick={handlePlay} style={startBStyle}> \n        {startButtonStr}\n        </button> &nbsp;&nbsp;\n        <button name='LoopAB' onClick={handleLoop} style={loopBStyle}>\n        {loopButtonStr}</button> &nbsp;&nbsp;\n        <button name='reset' onClick={handlePlay}> \n        ResetAB\n        </button> <hr />\n        <button name='save' onClick={handleSaveB} style={saveBStyle}> \n        {saveButtonStr}\n        </button>\n      </span>\n      <hr />\n        Version: {version}, &nbsp;\n        <a href={homepage} \n         target=\"_blank\" rel=\"noopener noreferrer\">Manual/Update</a>\n      </div>\n    ) // end return\n\n  } // end render()\n\n///////////////////////////////////////////////////\n\n  loadFile (event) {\n   if (event.target.name !== 'loadFile') return\n   if (event.target.files.length === 0) return\n\n   this.setState({totalTime: 0})\n   this.setState({startButtonStr: 'loadFile!'})\n   let file = event.target.files[0]\n   this.params.filename = file.name;\n\n   let reader = new FileReader()\n\n   reader.onload = function (e) {\n\n      audioCtx.decodeAudioData(reader.result, \n        function(audioBuffer) {\n          this.params.audioBuffer = audioBuffer\n          this.setState({startButtonStr: 'PlayFromA', playingAt: 0})\n          this.setState({timeA: 0})\n          this.setState({timeB: audioBuffer.duration})\n//          console.log (\"read\")\n        }.bind(this),\n        function (error) { console.log (\"Filereader error: \" + error.err) })\n\n   }.bind(this)\n\n   reader.readAsArrayBuffer(file)\n\n } // end loadFile()\n\n// UI handlers\n  handleSpeedSlider(event) { \n     if (event.target.name !== 'speedSlider') return\n     if (shifter) shifter.tempo = event.target.value/100.0\n     this.setState({playSpeed: event.target.value})\n  }\n\n  handlePitchSlider(event) { \n\n     let pitchSemi\n\n     if (event.target.name === 'pitchSliderSemi' ){\n       pitchSemi = event.target.value*1.0 + this.state.playPitchCents/100.0\n       this.setState({playPitchSemi: event.target.value})\n     } \n\n     if (event.target.name === 'pitchSliderCents' ){\n       pitchSemi = this.state.playPitchSemi*1.0 + event.target.value/100.0\n       this.setState({playPitchCents: event.target.value})\n     }\n\n     if (shifter) {\n       shifter.pitch = Math.pow(2.0, pitchSemi/12.0)\n     }\n\n     this.setState({playPitch: pitchSemi})\n\n  }\n\n  handleTimeSlider(event) { \n\n     if (event.target.name !== 'timeSlider') return\n\n     if (this.state.startButtonStr === 'PlayFromA') {\n        this.setState({playingAt: event.target.value});\n     }\n  }\n\n  handleVolumeSlider(event) { \n     if (event.target.name !== 'volumeSlider') return\n     let vol = event.target.value*1.0\n     gainNode.gain.value = vol/100.0\n     this.setState({playVolume: vol})\n  }\n\n  handlePlay(event) { \n\n     const {audioBuffer} = this.params;\n//     const {timeA, timeB} = this.state;\n\n// Unlock iOS \n     let buffer = audioCtx.createBuffer(1,1,44100); \n     let source = audioCtx.createBufferSource();\n     source.buffer = buffer;\n     source.connect (audioCtx.destination);\n     source.start();\n// End unlock\n\n     let timeB = this.state.timeB;\n     let timeA = this.state.timeA;\n\n     if (event.target.name === 'LoopAB') {\n       if (this.params.isPlaying) return;\n\n       if (timeB <= timeA) timeB = timeA + 10;\n\n       let partialAudioBuffer = \n          audioCtx.createBuffer(2,\n           (timeB-timeA)*audioBuffer.sampleRate, \n           audioBuffer.sampleRate);\n       let left  = audioBuffer.getChannelData(0);\n       let right = audioBuffer.getChannelData(1);\n\n       left  = left.subarray(\n         timeA*audioBuffer.sampleRate, timeB*audioBuffer.sampleRate);\n         partialAudioBuffer.copyToChannel(left,0,0);\n\n       if (audioBuffer.numberOfChannels === 2) {\n         right = right.subarray(\n         timeA*audioBuffer.sampleRate, timeB*audioBuffer.sampleRate);\n         partialAudioBuffer.copyToChannel(right,1,0);\n       }\n\n       shifter = new PitchShifter(audioCtx, partialAudioBuffer, 4096)\n       shifter.tempo = this.state.playSpeed/100.0\n       shifter.pitch = Math.pow(2.0,this.state.playPitch/12.0)\n\n       shifter.on('play', detail => {\n         console.log ('timePlayed', detail.timePlayed);\n         this.setState({playingAt: \n           parseFloat(this.state.timeA) + parseFloat(detail.timePlayed)});\n         if (detail.percentagePlayed === 100){ \n           this.params.isPlaying = false;\n           if (this.params.loop) this.handlePlay({target: {name: 'LoopAB'}});\n         }\n       });\n\n       this.params.isPlaying = true;\n       shifter.connect(gainNode)\n       gainNode.connect(audioCtx.destination)\n\n     } // end ABloop\n\n     if (event.target.name === 'startPause') {\n\n\n       if (this.state.startButtonStr === 'Pause'){\n         if (!this.params.isPlaying) return;\n         this.setState({timeA: this.state.playingAt});\n\n         if (shifter === null) return\n\n          shifter.disconnect();\n          shifter.off();\n          shifter = null;\n          this.params.isPlaying = false;\n          this.setState({ startButtonStr: 'PlayFromA' })\n\n       } \n\n       if (this.state.startButtonStr === 'PlayFromA') {\n         if (this.params.isPlaying) return;\n\n         let partialAudioBuffer = \n            audioCtx.createBuffer(2,\n             (audioBuffer.duration - this.state.timeA)\n              *audioBuffer.sampleRate, \n              audioBuffer.sampleRate);\n         let left  = audioBuffer.getChannelData(0);\n         let right = audioBuffer.getChannelData(1);\n\n         left  = left.subarray(\n           this.state.timeA*audioBuffer.sampleRate, \n           audioBuffer.duration*audioBuffer.sampleRate);\n           partialAudioBuffer.copyToChannel(left,0,0);\n\n         if (audioBuffer.numberOfChannels === 2) {\n           right = right.subarray(\n           this.state.timeA*audioBuffer.sampleRate, \n           audioBuffer.duration*audioBuffer.sampleRate);\n           partialAudioBuffer.copyToChannel(right,1,0);\n         }\n\n       shifter = new PitchShifter(audioCtx, partialAudioBuffer, 4096)\n       shifter.tempo = this.state.playSpeed/100.0\n       shifter.pitch = Math.pow(2.0,this.state.playPitch/12.0)\n\n       shifter.on('play', detail => {\n         this.setState({playingAt: \n         parseFloat(this.state.timeA) + parseFloat(detail.timePlayed)});\n         if (detail.percentagePlayed === 100) {\n           shifter.disconnect();\n           shifter.off(); \n           shifter = null;\n           this.params.isPlaying = false;\n         }\n       });\n \n       this.params.isPlaying = true; \n       shifter.connect(gainNode)\n       gainNode.connect(audioCtx.destination)\n\n       this.setState({startButtonStr: 'Pause'});\n\n       }\n\n     } \n\n     if (event.target.name === 'reset') {\n\n      if (!this.isPlaying) return;\n\n        if (shifter) {\n          shifter.disconnect();\n          shifter.off();\n          shifter = null; // null\n        }\n\n        this.setState({startButtonStr: 'PlayFromA', \n          playingAt: 0, timeA: 0, timeB: audioBuffer.duration})\n\n     } // end if\n\n  } // end handlePlay()\n\n  handleSaveA(event) { \n\n    const {audioBuffer} = this.params;\n\n    if (this.state.isPlayng) return;\n\n    console.log ('handleSaveA');\n\n    const offlineCtx = new OfflineAudioContext(\n       audioBuffer.numberOfChannels,\n       parseInt(audioBuffer.length*(100.0/this.state.playSpeed)),\n       audioBuffer.sampleRate);\n\n    shifter = new PitchShifter(offlineCtx, audioBuffer, 512);\n    shifter.tempo = this.state.playSpeed/100.0;\n    shifter.pitch = Math.pow(2.0,this.state.playPitch/12.0);\n  //  shifter.connect(gainNode); // offlineAudiocontext cannot use gainNode\n\n    this.params.isPlaying = true;\n    shifter.connect(offlineCtx.destination);\n    offlineCtx.startRendering();\n\n    offlineCtx.oncomplete = function(e) {\n      console.log('offline rendering complete:', e.renderedBuffer);\n      let source = audioCtx.createBufferSource();\n      source.buffer = e.renderedBuffer;\n      // source.buffer = audioBuffer;\n      source.connect(audioCtx.destination);\n      source.start();\n\n//      this.fakeDownload(e.renderedBuffer);\n    }.bind(this);\n\n  }\n\n  fakeDownload(audioBuffer){\n   // let blob = new Blob(, {type: 'audio/x-wav'})\n    const words = this.params.filename.split('.');\n    let outFileName = \n         words[0]\n       + '&s' + parseInt(this.state.playSpeed)\n       + '&p' + parseInt(this.state.playPitch*100)\n       + '.wav';\n    let blob = new Blob([toWav(audioBuffer)], {type: 'audio/wav'});\n\n    saveAs(blob,outFileName);\n\n    console.log('Output ', outFileName);\n\n  }\n\n  handleSaveB(event) { \n\n    const {audioBuffer} = this.params;\n    if (this.params.isPlaying) return;\n    if (this.params.save) return;\n\n    console.log ('handleSaveB');\n\n// https://www.gmass.co/blog/record-audio-mobile-web-page-ios-android/\n// https://developer.mozilla.org/en-US/docs/Web/API/ScriptProcessorNode/onaudioprocess\n\n    let saverNode = null;\n    let bufferSize = 4096;\n    let channels = audioBuffer.numberOfChannels;\n\n    shifter = new PitchShifter(audioCtx, audioBuffer, bufferSize);\n    shifter.tempo = this.state.playSpeed/100.0;\n    shifter.pitch = Math.pow(2.0,this.state.playPitch/12.0);\n    this.params.save = true;\n\n    if (audioCtx.createJavaScriptNode) {\n      saverNode = audioCtx.createJavaScriptNode(bufferSize,channels,channels);\n    } else if (audioCtx.createScriptProcessor) {\n      saverNode = audioCtx.createScriptProcessor(bufferSize,channels,channels);\n    } else {\n      console.log ('createScript is not supported');\n      return;\n    }\n\n/* Storage */\n\n    this.params.exportBuffer = audioCtx.createBuffer( \n      channels, \n      parseInt(audioBuffer.length*(100/this.state.playSpeed)), \n      audioBuffer.sampleRate);\n    this.params.exportDataL = new Float32Array(this.params.exportBuffer.length);\n    this.params.exportDataR = new Float32Array(this.params.exportBuffer.length);\n\n    this.params.save = true;\n\n/* Script Processor */\n    let index = 0;\n    saverNode.onaudioprocess = function(event){\n      let inputBuffer = event.inputBuffer;\n      let outputBuffer = event.outputBuffer;\n\n\n      for (let channel = 0; channel < inputBuffer.numberOfChannels; channel++){\n         let inputData = inputBuffer.getChannelData(channel);\n         let outputData = outputBuffer.getChannelData(channel);\n\n        for (let sample = 0; sample < inputBuffer.length; sample++) {\n          outputData[sample] = inputData[sample];\n          if (channel === 0) \n             this.params.exportDataL[index + sample] = inputData[sample];\n          else \n             this.params.exportDataR[index + sample] = inputData[sample];\n        }\n      }\n\n      index += inputBuffer.length;\n\n    }.bind(this);\n\n    shifter.on('play', detail => {\n      this.setState({playingAt: \n         parseFloat(this.state.timeA) + parseFloat(detail.timePlayed)});\n\n        if (detail.percentagePlayed === 100) {\n          this.params.exportBuffer.copyToChannel(this.params.exportDataL,0,0)\n          this.params.exportBuffer.copyToChannel(this.params.exportDataR,1,0)\n          this.fakeDownload(this.params.exportBuffer);\n          this.params.save = false;\n          this.setState({saveButtonStr: 'Save'});\n          this.params.isPlaying = false;\n        }\n     });\n\n    this.params.isPlaying = true;\n    shifter.connect(saverNode);\n    saverNode.connect(gainNode);\n    gainNode.connect(audioCtx.destination);\n\n    this.setState({saveButtonStr: 'Please Wait!'});\n\n  } // end handleSaveB\n\n  handleLoop(event) {\n\n    if (event.target.name === 'setA') {\n      this.setState ({timeA: this.state.playingAt});\n    }\n    if (event.target.name === 'setB'){\n      if (this.state.playingAt >=  this.state.timeA)\n        this.setState ({timeB: parseFloat(this.state.playingAt)});\n      else\n        this.setState ({timeB: parseFloat(this.state.timeA) + parseFloat(10)});\n    }\n\n    if (event.target.name === 'LoopAB'){\n\n      if (this.state.loopButtonStr === 'LoopAB'){ \n        if (this.params.isPlaying) return;\n\n        if (shifter){\n          shifter.disconnect();\n          shifter.off();\n        }\n\n        this.setState ({loopButtonStr: 'StopLoop'});\n        this.params.loop = true;\n        this.handlePlay({target: {name: 'LoopAB'}});\n\n      } \n      else if (this.state.loopButtonStr === 'StopLoop'){\n        if (!this.params.isPlaying) return;\n\n        if (shifter){\n          shifter.disconnect();\n          shifter.off();\n          shifter = null;\n        }\n\n        this.params.loop = false;\n        this.params.isPlaying = false;\n        this.setState ({loopButtonStr: 'LoopAB'});\n      }\n    }\n  }\n \n} // end class\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}