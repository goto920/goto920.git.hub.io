{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["audioCtx","gainNode","version","packageJSON","homepage","subversion","slice","window","AudioContext","webkitAudioContext","shifter","App","props","params","audioBuffer","undefined","state","playingAt","timeA","timeB","playSpeed","playPitch","playPitchSemi","playPitchCents","playVolume","startButtonStr","loopButtonStr","setState","bind","handleWindowClose","loadFile","fetchFile","handleSpeedSlider","handlePitchSlider","handleTimeSlider","handleVolumeSlider","handlePlay","handleSave","timer","handleLoop","event","close","addEventListener","this","createGain","removeEventListener","clearInterval","intervalId","parseFloat","timePlayed","percentagePlayed","target","name","duration","className","type","accept","onChange","min","max","value","Math","round","step","onClick","href","rel","files","length","totalTime","file","reader","FileReader","onload","e","decodeAudioData","result","error","console","log","err","readAsArrayBuffer","keyCode","charCode","url","off","fetch","then","response","arrayBuffer","buffer","tempo","pitchSemi","pitch","pow","vol","gain","createBuffer","source","createBufferSource","connect","destination","start","partialAudioBuffer","sampleRate","left","getChannelData","right","subarray","copyToChannel","numberOfChannels","PitchShifter","setInterval","PlayingAt","disconnect","loop","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.48248273.chunk.js","sourcesContent":["import React, { Component } from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport {PitchShifter} from 'soundtouchjs'\nimport packageJSON from '../package.json'\n\nconst version = (packageJSON.homepage + packageJSON.subversion).slice(-10)\nconst homepage = 'https://goto920.github.io/demos/variableplayer/'\n\nwindow.AudioContext = window.AudioContext || window.webkitAudioContext\n\nvar audioCtx;\nvar gainNode;\n// =  audioCtx.createGain()\nvar shifter = null // null\n\nclass App extends Component {\n\n  constructor (props){\n    super(props)\n\n    this.params = {\n      audioBuffer: undefined,\n    }\n\n    this.state = {\n      playingAt: 0,\n      timeA: 0,\n      timeB: 0,\n      playSpeed: 100, // in percent\n      playPitch: 0, // in semi-tone (real value)\n      playPitchSemi: 0, // in semi-tone (integer part)\n      playPitchCents: 0, // percent for one semitone\n      playVolume: 80, // in percent\n      startButtonStr: 'loadFile!', \n      loopButtonStr: 'LoopAB'\n    }\n\n    this.setState = this.setState.bind(this)\n    this.handleWindowClose = this.handleWindowClose.bind(this)\n    this.loadFile = this.loadFile.bind(this)\n    this.fetchFile = this.fetchFile.bind(this)\n    this.handleSpeedSlider = this.handleSpeedSlider.bind(this)\n    this.handlePitchSlider = this.handlePitchSlider.bind(this)\n    this.handleTimeSlider = this.handleTimeSlider.bind(this)\n    this.handleVolumeSlider = this.handleVolumeSlider.bind(this)\n    this.handlePlay = this.handlePlay.bind(this)\n    this.handleSave = this.handleSave.bind(this)\n    this.timer = this.timer.bind(this);\n    this.handleLoop = this.handleLoop.bind(this)\n    \n  } // end constructor\n\n  handleWindowClose(event) { \n    audioCtx.close()\n  }\n\n  componentWillMount () { // before render()\n    window.addEventListener('beforeClosing', this.handleWindowClose)\n  }\n  \n  componentDidMount () { // after render()\n    audioCtx = new window.AudioContext()\n    gainNode = audioCtx.createGain()\n  }\n\n  componentWillUnmount () { // before closing app\n    window.removeEventListener('beforeClosing', this.handleWindowClose)\n    clearInterval(this.state.intervalId);\n  }\n\n  timer(){\n    if (shifter !== null ) {\n      this.setState({playingAt: \n         parseFloat(this.state.timeA) + parseFloat(shifter.timePlayed)});\n      if (shifter.percentagePlayed === 100) \n        this.handlePlay({target: {name: 'LoopAB'}});\n    }\n\n  } // end timer\n\n  render() {\n    const {loadFile, fetchFile, \n           handleSpeedSlider, handlePitchSlider, handleVolumeSlider, \n           handleTimeSlider, handlePlay, handleSave, handleLoop} = this\n    const {playingAt, timeA, timeB,\n           playSpeed, playPitch, playPitchSemi, playPitchCents,\n           playVolume, startButtonStr, loopButtonStr} = this.state\n\n    let duration = 0;\n    if (this.params.audioBuffer !== undefined) \n       duration = this.params.audioBuffer.duration\n\n    return (\n      <div className=\"App\">\n      Variable speed/pitch audio player<br /> \n      with soundtouchjs by KG\n      <hr />\n      Input Audio (local file): <br />\n        <span className='selectFile'>\n        <input type='file' name='loadFile' \n        accept='audio/*' onChange={loadFile} /><br />\n        </span>\n{/*\n        <span className='selectFile'>\n        URL and Enter <input type='url' name='fetchFile' \n        accept='audio/*' onKeyPress={fetchFile} />\n        </span>\n*/}\n      <hr />\n\n      Speed(%): {playSpeed} <br />\n        <span className='slider'> \n         <center>\n         025<input type='range' name='speedSlider' min='25' max='200'\n         value = {playSpeed} onChange={handleSpeedSlider} />200 \n         </center>\n        </span>\n      <hr />\n      Pitch (semi-tone): {playPitch} <br />\n        <span className='slider'> \n         <center>\n         -12<input type='range' name='pitchSliderSemi' min='-12' max='12'\n         value = {playPitchSemi} onChange={handlePitchSlider} />12<br />\n         -100<input type='range' name='pitchSliderCents' min='-100' max='100'\n         value = {playPitchCents} onChange={handlePitchSlider} />100<br />\n         </center>\n\n        </span>\n      <hr />\n        Time: {Math.round(playingAt)}<br />\n        <span className='slider'> \n        <center>\n        0<input type='range' name='timeSlider'\n        min='0' max={duration}\n        value = {playingAt} step='1'\n        onChange={handleTimeSlider} />\n        {Math.round(duration)}<br />\n        </center>\n        <button name='setA' onClick={handleLoop} >setA</button>\n        : {Math.round(timeA*10)/10} &nbsp;&nbsp;\n        <button name='setB' onClick={handleLoop} >setB</button>\n        : {Math.round(timeB*10)/10}\n        </span>\n        <hr />\n      Volume: {playVolume}<br />\n        <span className='slider'> \n         <center>\n         0<input type='range' name='volumeSlider' min='0' max='150'\n         value = {playVolume} onChange={handleVolumeSlider} />150<br />\n         </center>\n        </span>\n      <hr />\n\n      <span>\n        <button name='startPause' onClick={handlePlay}> \n        {startButtonStr}\n        </button> &nbsp;&nbsp;\n        <button name='LoopAB' onClick={handleLoop} >\n        {loopButtonStr}</button> &nbsp;&nbsp;\n        <button name='reset' onClick={handlePlay}> \n        ResetAB\n        </button> &nbsp;&nbsp;\n{/*\n        <button name='save' onClick={handleSave}> \n        Save\n        </button>\n*/}\n      </span>\n      <hr />\n        Version: {version}, &nbsp;\n        <a href={homepage} \n         target=\"_blank\" rel=\"noopener noreferrer\">Manual/Update</a>\n      </div>\n    ) // end return\n\n  } // end render()\n\n///////////////////////////////////////////////////\n\n  loadFile (event) {\n   if (event.target.name !== 'loadFile') return\n   if (event.target.files.length === 0) return\n\n   this.setState({totalTime: 0})\n   this.setState({startButtonStr: 'loadFile!'})\n   let file = event.target.files[0]\n\n   let reader = new FileReader()\n\n   reader.onload = function (e) {\n\n      audioCtx.decodeAudioData(reader.result, \n        function(audioBuffer) {\n          this.params.audioBuffer = audioBuffer\n          this.setState({startButtonStr: 'PlayFromA', playingAt: 0})\n          this.setState({timeA: 0})\n          this.setState({timeB: audioBuffer.duration})\n//          console.log (\"read\")\n        }.bind(this),\n        function (error) { console.log (\"Filereader error: \" + error.err) })\n\n   }.bind(this)\n\n   reader.readAsArrayBuffer(file)\n\n } // end loadFile()\n   \nfetchFile (event) {\n\n   if (event.target.name !== 'fetchFile') return\n\n   let code = event.keyCode || event.charCode \n   if (code !== 13) return\n\n//   console.log (\"Got enter\")\n\n   let url = event.target.value \n   this.setState({startButtonStr: 'loadFile!'})\n\n   if (shifter) { shifter.off() }\n   console.log('fetchFile: ' + url);\n\n   fetch(url)\n     .then(response => response.arrayBuffer())\n     .then(buffer => {\n       audioCtx.decodeAudioData(buffer, audioBuffer => {\n          this.params.audioBuffer = audioBuffer;\n          this.setState({startButtonStr: 'PlayFromA'});\n          this.setState({timeA: 0, timeB: audioBuffer.duration});\n       })  // end decode \n     }) // end then\n\n} // end fetchFile()\n\n// UI handlers\n  handleSpeedSlider(event) { \n     if (event.target.name !== 'speedSlider') return\n     if (shifter) shifter.tempo = event.target.value/100.0\n     this.setState({playSpeed: event.target.value})\n  }\n\n  handlePitchSlider(event) { \n\n     let pitchSemi\n\n     if (event.target.name === 'pitchSliderSemi' ){\n       pitchSemi = event.target.value*1.0 + this.state.playPitchCents/100.0\n       this.setState({playPitchSemi: event.target.value})\n     } \n\n     if (event.target.name === 'pitchSliderCents' ){\n       pitchSemi = this.state.playPitchSemi*1.0 + event.target.value/100.0\n       this.setState({playPitchCents: event.target.value})\n     }\n\n     if (shifter) {\n       shifter.pitch = Math.pow(2.0, pitchSemi/12.0)\n     }\n\n     this.setState({playPitch: pitchSemi})\n\n  }\n\n  handleTimeSlider(event) { \n\n     if (event.target.name !== 'timeSlider') return\n\n     if (this.state.startButtonStr === 'PlayFromA') {\n        this.setState({playingAt: event.target.value});\n     }\n  }\n\n  handleVolumeSlider(event) { \n     if (event.target.name !== 'volumeSlider') return\n     let vol = event.target.value*1.0\n     gainNode.gain.value = vol/100.0\n     this.setState({playVolume: vol})\n  }\n\n  handlePlay(event) { \n\n     const {audioBuffer} = this.params;\n//     const {timeA, timeB} = this.state;\n\n// Unlock iOS \n     let buffer = audioCtx.createBuffer(1,1,22050); \n     let source = audioCtx.createBufferSource();\n     source.buffer = buffer;\n     source.connect (audioCtx.destination);\n     source.start();\n// End unlock\n\n     let timeB = this.state.timeB;\n     let timeA = this.state.timeA;\n\n     if (event.target.name === 'LoopAB') {\n       if (timeB <= timeA) timeB = timeA + 10;\n\n       let partialAudioBuffer = \n          audioCtx.createBuffer(2,\n           (timeB-timeA)*audioBuffer.sampleRate, \n           audioBuffer.sampleRate);\n       let left  = audioBuffer.getChannelData(0);\n       let right = audioBuffer.getChannelData(1);\n\n       left  = left.subarray(\n         timeA*audioBuffer.sampleRate, timeB*audioBuffer.sampleRate);\n         partialAudioBuffer.copyToChannel(left,0,0);\n\n       if (audioBuffer.numberOfChannels === 2) {\n         right = right.subarray(\n         timeA*audioBuffer.sampleRate, timeB*audioBuffer.sampleRate);\n         partialAudioBuffer.copyToChannel(right,1,0);\n       }\n\n       shifter = new PitchShifter(audioCtx, partialAudioBuffer, 1024)\n       shifter.tempo = this.state.playSpeed/100.0\n       shifter.pitch = Math.pow(2.0,this.state.playPitch/12.0)\n\n       shifter.connect(gainNode)\n       gainNode.connect(audioCtx.destination)\n\n       let intervalId = setInterval(this.timer, 1000);\n       this.setState({intervalId: intervalId});\n\n     } // end ABloop\n\n     if (event.target.name === 'startPause') {\n\n       if (this.state.startButtonStr === 'Pause'){\n\n         this.setState({timeA: this.state.playingAt});\n         clearInterval(this.state.intervalId);\n\n         if (shifter === null) return\n          this.setState({PlayingAt: \n            parseFloat(timeA) + parseFloat(shifter.timePlayed)});\n\n          shifter.disconnect();\n          shifter.off();\n          shifter = null;\n          this.setState({ startButtonStr: 'PlayFromA' })\n\n       } \n\n       if (this.state.startButtonStr === 'PlayFromA') {\n         if (this.state.loopButtonStr !== 'LoopAB') return;\n\n         let partialAudioBuffer = \n            audioCtx.createBuffer(2,\n             (audioBuffer.duration - this.state.timeA)\n              *audioBuffer.sampleRate, \n              audioBuffer.sampleRate);\n         let left  = audioBuffer.getChannelData(0);\n         let right = audioBuffer.getChannelData(1);\n\n         left  = left.subarray(\n           this.state.timeA*audioBuffer.sampleRate, \n           audioBuffer.duration*audioBuffer.sampleRate);\n           partialAudioBuffer.copyToChannel(left,0,0);\n\n         if (audioBuffer.numberOfChannels === 2) {\n           right = right.subarray(\n           this.state.timeA*audioBuffer.sampleRate, \n           audioBuffer.duration*audioBuffer.sampleRate);\n           partialAudioBuffer.copyToChannel(right,1,0);\n         }\n\n       shifter = new PitchShifter(audioCtx, partialAudioBuffer, 1024)\n       shifter.tempo = this.state.playSpeed/100.0\n       shifter.pitch = Math.pow(2.0,this.state.playPitch/12.0)\n\n       shifter.connect(gainNode)\n       gainNode.connect(audioCtx.destination)\n\n       let intervalId = setInterval(this.timer, 1000);\n       this.setState({intervalId: intervalId});\n       this.setState({startButtonStr: 'Pause'});\n\n       }\n\n     } \n\n     if (event.target.name === 'reset') {\n\n        if (shifter) {\n          shifter.disconnect();\n          shifter.off();\n          shifter = null; // null\n          clearInterval(this.state.intervalId);\n        }\n\n        this.setState({startButtonStr: 'PlayFromA', \n          playingAt: 0, timeA: 0, timeB: audioBuffer.duration})\n\n     } // end if\n\n     if (event.target.name === 'Save') {\n        shifter.disconnect()\n        shifter.off();\n        shifter = null; // null\n     } // end if\n\n  } // end handlePlay()\n\n  handleSave(event) { \n  }\n\n  handleLoop(event) {\n    if (event.target.name === 'setA') {\n      this.setState ({timeA: this.state.playingAt});\n    }\n    if (event.target.name === 'setB'){\n      if (this.state.playingAt >=  this.state.timeA)\n        this.setState ({timeB: parseFloat(this.state.playingAt)});\n      else\n        this.setState ({timeB: parseFloat(this.state.timeA) + parseFloat(10)});\n    }\n\n    if (event.target.name === 'LoopAB'){\n\n      if (this.state.loopButtonStr === 'LoopAB'){ \n        if (this.state.startButtonStr !== 'PlayFromA') return;\n\n        if (shifter){\n          shifter.disconnect();\n          shifter.off();\n        }\n\n        this.handlePlay({target: {name: 'LoopAB'}});\n        this.setState ({loopButtonStr: 'StopLoop'});\n\n      } \n      else if (this.state.loopButtonStr === 'StopLoop'){\n\n        if (shifter){\n          shifter.disconnect();\n          shifter.off();\n        }\n\n        clearInterval(this.state.intervalId);\n        this.setState ({loop: false});\n        this.setState ({loopButtonStr: 'LoopAB'});\n      }\n    }\n  }\n \n} // end class\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}