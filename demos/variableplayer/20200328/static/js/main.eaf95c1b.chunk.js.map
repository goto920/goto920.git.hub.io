{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["audioCtx","gainNode","version","packageJSON","homepage","subversion","slice","window","AudioContext","webkitAudioContext","shifter","iOS","navigator","userAgent","match","App","props","params","filename","undefined","audioBuffer","isPlaying","loop","exportDataL","exportDataR","exportBuffer","save","state","playingAt","playingAtSlider","timeA","timeB","playSpeed","playPitch","playPitchSemi","playPitchCents","playVolume","startButtonStr","loopButtonStr","saveButtonStr","setState","bind","handleWindowClose","loadFile","handleSpeedSlider","handlePitchSlider","handleTimeSlider","handleVolumeSlider","handlePlay","handleSaveA","handleSaveB","fakeDownload","handleLoop","event","close","createGain","addEventListener","this","removeEventListener","startBStyle","loopBStyle","saveBStyle","duration","color","className","type","name","accept","onChange","min","max","value","Math","round","step","onClick","style","href","target","rel","files","length","totalTime","file","reader","FileReader","onload","e","decodeAudioData","result","error","console","log","err","readAsArrayBuffer","tempo","pitchSemi","pitch","pow","vol","gain","buffer","createBuffer","source","createBufferSource","connect","destination","start","disconnect","off","partialAudioBuffer","sampleRate","left","getChannelData","right","subarray","tmp","sample","numberOfChannels","PitchShifter","on","detail","setTime","parseFloat","timePlayed","percentagePlayed","isPlayng","offlineCtx","OfflineAudioContext","parseInt","startRendering","oncomplete","renderedBuffer","outFileName","split","blob","Blob","toWav","saveAs","saverNode","channels","createJavaScriptNode","createScriptProcessor","Float32Array","index","onaudioprocess","inputBuffer","outputBuffer","channel","inputData","outputData","Component","Boolean","location","hostname","ReactDOM","render","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.eaf95c1b.chunk.js","sourcesContent":["import React, { Component } from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport {PitchShifter} from 'soundtouchjs'\nimport packageJSON from '../package.json'\nimport {saveAs} from 'file-saver';\nimport * as toWav from 'audiobuffer-to-wav';\n// import {fetch as fetchPolyfill} from 'whatwg-fetch';\n\nconst version = (packageJSON.homepage + packageJSON.subversion).slice(-10)\nconst homepage = 'https://goto920.github.io/demos/variableplayer/'\n\nwindow.AudioContext = window.AudioContext || window.webkitAudioContext\n\nvar audioCtx;\nvar gainNode;\n// =  audioCtx.createGain()\nvar shifter = null // null\n\nvar iOS = false;\nif(  navigator.userAgent.match(/iPhone/i) \n  || navigator.userAgent.match(/iPod/i)\n  || navigator.userAgent.match(/iPad/i)){\n  iOS = true;\n}\n\n\nclass App extends Component {\n\n  constructor (props){\n    super(props)\n\n    this.params = {\n      filename: undefined,\n      audioBuffer: undefined,\n      isPlaying: false,\n      loop: false,\n      exportDataL: undefined,\n      exportDataR: undefined,\n      exportBuffer: undefined,\n      save: false\n    }\n\n    this.state = {\n      playingAt: 0,\n      playingAtSlider: 0,\n      timeA: 0,\n      timeB: 0,\n      playSpeed: 100, // in percent\n      playPitch: 0, // in semi-tone unit (real value)\n      playPitchSemi: 0, // in semi-tone (integer part)\n      playPitchCents: 0, // percent for one semitone\n      playVolume: 80, // in percent\n      startButtonStr: 'loadFile!', \n      loopButtonStr: 'LoopAB',\n      saveButtonStr: 'ExportWav'\n    }\n\n    this.setState = this.setState.bind(this)\n    this.handleWindowClose = this.handleWindowClose.bind(this)\n    this.loadFile = this.loadFile.bind(this)\n    this.handleSpeedSlider = this.handleSpeedSlider.bind(this)\n    this.handlePitchSlider = this.handlePitchSlider.bind(this)\n    this.handleTimeSlider = this.handleTimeSlider.bind(this)\n    this.handleVolumeSlider = this.handleVolumeSlider.bind(this)\n    this.handlePlay = this.handlePlay.bind(this);\n    this.handleSaveA = this.handleSaveA.bind(this);\n    this.handleSaveB = this.handleSaveB.bind(this);\n    this.fakeDownload = this.fakeDownload.bind(this);\n    this.handleLoop = this.handleLoop.bind(this);\n    \n  } // end constructor\n\n  handleWindowClose(event) { \n    audioCtx.close()\n  }\n\n  componentDidMount () { // after render()\n    audioCtx = new window.AudioContext()\n    gainNode = audioCtx.createGain()\n    window.addEventListener('beforeClosing', this.handleWindowClose)\n  }\n\n  componentWillUnmount () { // before closing app\n    window.removeEventListener('beforeClosing', this.handleWindowClose)\n  }\n\n  render() {\n    const {loadFile, \n           handleSpeedSlider, handlePitchSlider, handleVolumeSlider, \n           handleTimeSlider, handlePlay, handleSaveA, handleSaveB, handleLoop} = this\n    const {playingAt, playingAtSlider,timeA, timeB,\n           playSpeed, playPitch, playPitchSemi, playPitchCents,\n           playVolume, startButtonStr, loopButtonStr, saveButtonStr} \n           = this.state\n\n    let duration = 0;\n    if (this.params.audioBuffer !== undefined) \n       duration = this.params.audioBuffer.duration\n\n    let startBStyle; \n    if (startButtonStr === 'Pause')\n      startBStyle = {color: 'green'}\n    else  \n      startBStyle = {}\n\n    let loopBStyle; \n    if (loopButtonStr === 'StopLoop')\n      loopBStyle = {color: 'green'}\n    else  \n      loopBStyle = {}\n\n    let saveBStyle; \n    if (saveButtonStr === 'AbortExport')\n      saveBStyle = {color: 'green'}\n    else  \n      saveBStyle = {}\n\n    return (\n      <div className=\"App\">\n      Variable speed/pitch audio player<br /> \n      with soundtouchjs by KG\n      <hr />\n      1) Input Audio (local file): <br />\n        <span className='selectFile'>\n        <input type='file' name='loadFile' \n        accept='audio/*' onChange={loadFile} /><br />\n        </span>\n      <hr />\n\n      Speed(%): {playSpeed} <br />\n        <span className='slider'> \n         <center>\n         025<input type='range' name='speedSlider' min='25' max='200'\n         value = {playSpeed} onChange={handleSpeedSlider} />200 \n         </center>\n        </span>\n      <hr />\n      Pitch (semi-tone.cents): {playPitch} <br />\n        <span className='slider'> \n         <center>\n         -12<input type='range' name='pitchSliderSemi' min='-12' max='12'\n         value = {playPitchSemi} onChange={handlePitchSlider} />12<br />\n         -100<input type='range' name='pitchSliderCents' min='-100' max='100'\n         value = {playPitchCents} onChange={handlePitchSlider} />100<br />\n         </center>\n\n        </span>\n      <hr />\n        Time: {Math.round(playingAt)}<br />\n        <span className='slider'> \n        <center>\n        0<input type='range' name='timeSlider'\n        min='0' max={duration}\n        value = {playingAtSlider} step='1'\n        onChange={handleTimeSlider} />\n        {Math.round(duration)}<br />\n        </center>\n        <button name='setA' onClick={handleLoop} >setA</button>\n        : {Math.round(timeA*10)/10} &nbsp;&nbsp;\n        <button name='setB' onClick={handleLoop} >setB</button>\n        : {Math.round(timeB*10)/10}\n        </span>\n        <hr />\n      Volume: {playVolume}<br />\n        <span className='slider'> \n         <center>\n         0<input type='range' name='volumeSlider' min='0' max='150'\n         value = {playVolume} onChange={handleVolumeSlider} />150<br />\n         </center>\n        </span>\n      <hr />\n\n      <span>\n        2) <button name='startPause' onClick={handlePlay} style={startBStyle}> \n        {startButtonStr}\n        </button> &nbsp;&nbsp;\n        <button name='LoopAB' onClick={handleLoop} style={loopBStyle}>\n        {loopButtonStr}</button> &nbsp;&nbsp;\n        <button name='reset' onClick={handleLoop}> \n        ResetAB\n        </button> <hr />\n        3) <button name='save' onClick={handleSaveB} style={saveBStyle}> \n        {saveButtonStr}\n        </button> (At playback speed, vol. 100%)\n      </span>\n      <hr />\n        Version: {version}, &nbsp;\n        <a href={homepage} \n         target=\"_blank\" rel=\"noopener noreferrer\">Manual/Update</a>\n      </div>\n    ) // end return\n\n  } // end render()\n\n///////////////////////////////////////////////////\n\n  loadFile (event) {\n\n   if (event.target.name !== 'loadFile') return;\n   if (event.target.files.length === 0) return;\n   if (this.params.isPlaying) return;\n\n   this.setState({totalTime: 0})\n   this.setState({startButtonStr: 'loadFile!'})\n   let file = event.target.files[0]\n   this.params.filename = file.name;\n\n   let reader = new FileReader()\n\n   reader.onload = function (e) {\n\n      audioCtx.decodeAudioData(reader.result, \n        function(audioBuffer) {\n          this.params.audioBuffer = audioBuffer\n          this.setState({startButtonStr: 'PlayFromA', \n             playingAt: 0, playingAtSlider: 0})\n          this.setState({timeA: 0})\n          this.setState({timeB: audioBuffer.duration})\n        }.bind(this),\n        function (error) { console.log (\"Filereader error: \" + error.err) })\n\n   }.bind(this)\n\n   reader.readAsArrayBuffer(file)\n\n } // end loadFile()\n\n// UI handlers\n  handleSpeedSlider(event) { \n     console.log('handleSpeedSlider');\n     if (event.target.name !== 'speedSlider') return\n     if (shifter) shifter.tempo = event.target.value/100.0\n     this.setState({playSpeed: event.target.value})\n  }\n\n  handlePitchSlider(event) { \n     console.log('handlePitchSlider');\n\n     let pitchSemi;\n\n     if (event.target.name === 'pitchSliderSemi' ){\n       pitchSemi = event.target.value*1.0 + this.state.playPitchCents/100.0\n       this.setState({playPitchSemi: event.target.value})\n     } \n\n     if (event.target.name === 'pitchSliderCents' ){\n       pitchSemi = this.state.playPitchSemi*1.0 + event.target.value/100.0\n       this.setState({playPitchCents: event.target.value})\n     }\n\n     if (shifter) {\n       shifter.pitch = Math.pow(2.0, pitchSemi/12.0)\n     }\n\n     this.setState({playPitch: pitchSemi})\n\n  }\n\n  handleTimeSlider(event) { \n     console.log('handleTimeSlider');\n\n     if (event.target.name !== 'timeSlider') return\n\n     if (this.state.startButtonStr === 'PlayFromA') {\n        let value = event.target.value;\n        this.setState({playingAt: value, playingAtSlider: value});\n     }\n  }\n\n  handleVolumeSlider(event) { \n     if (event.target.name !== 'volumeSlider') return\n     let vol = event.target.value*1.0\n     gainNode.gain.value = vol/100.0\n     this.setState({playVolume: vol})\n  }\n\n  handlePlay(event) { \n     const {audioBuffer} = this.params;\n\n// Unlock iOS \n   if (iOS){\n     let buffer = audioCtx.createBuffer(1,1,44100); \n     let source = audioCtx.createBufferSource();\n     source.buffer = buffer;\n     source.connect (audioCtx.destination);\n     source.start();\n   }\n// End unlock\n\n// startPause or LoopAB\n   if (event.target.name === 'startPause' \n    || event.target.name === 'LoopAB') {\n\n     let timeA = this.state.timeA;\n     let timeB = this.state.timeB;\n     if (timeB <= timeA) timeB = timeA + 1;\n\n// Pause\n     if (this.state.startButtonStr === 'Pause'){\n       if (!this.params.isPlaying) return;\n\n       this.setState({timeA: this.state.playingAtSlider});\n       this.setState({playingAt: this.state.playingAtSlider});\n\n       if (shifter === null) return\n\n       shifter.disconnect(); shifter.off(); shifter = null;\n       this.params.isPlaying = false;\n       this.setState({ startButtonStr: 'PlayFromA' })\n       return;\n     } // end pause \n\n// PlayFromA\n     if (event.target.name === 'startPause' \n       && this.state.startButtonStr === 'PlayFromA') {\n       if (this.params.isPlaying) return;\n       timeB = audioBuffer.duration;\n     }\n\n// PlayFromA/LoopAB\n    if (this.state.startButtonStr === 'PlayFromA'\n       || this.state.loop) {\n      console.log ('Play AB', timeA, timeB);\n\n     let partialAudioBuffer = audioCtx.createBuffer(2,\n          (timeB - timeA) *audioBuffer.sampleRate, audioBuffer.sampleRate);\n     let left  = audioBuffer.getChannelData(0);\n     let right = audioBuffer.getChannelData(1);\n\n     left  = left.subarray(timeA*audioBuffer.sampleRate, \n           timeB*audioBuffer.sampleRate);\n\n     let tmp = partialAudioBuffer.getChannelData(0);\n     for (let sample=0; sample < left.length; sample++) \n        tmp[sample] = left[sample];\n         //partialAudioBuffer.copyToChannel(left,0,0);\n\n     if (audioBuffer.numberOfChannels >= 2) {\n       tmp = partialAudioBuffer.getChannelData(0);\n       right = right.subarray(timeA*audioBuffer.sampleRate, \n        timeB*audioBuffer.sampleRate);\n\n       for (let sample=0; sample < right.length; sample++) \n         tmp[sample] = right[sample];\n        // partialAudioBuffer.copyToChannel(right,1,0);\n     }\n\n     shifter = new PitchShifter(audioCtx, partialAudioBuffer, 4096)\n     shifter.tempo = this.state.playSpeed/100.0\n     shifter.pitch = Math.pow(2.0,this.state.playPitch/12.0)\n\n     shifter.on('play', detail => {\n       let setTime \n           = parseFloat(this.state.timeA) + parseFloat(detail.timePlayed);\n       this.setState({playingAt: setTime}); \n       // if(!iOS) \n       this.setState({playingAtSlider: setTime})\n\n       if (detail.percentagePlayed === 100) {\n         shifter.disconnect();\n         shifter.off(); \n         shifter = null;\n         this.params.isPlaying = false;\n         if (this.params.loop) \n              this.handlePlay({target: {name: 'LoopAB'}});\n       }\n\n     }); // end shifter.on\n \n     this.params.isPlaying = true; \n     shifter.connect(gainNode);\n     gainNode.connect(audioCtx.destination);\n\n     if (event.target.name === 'startPause' \n         && this.state.startButtonStr === 'PlayFromA') \n              this.setState({startButtonStr: 'Pause'});\n\n     console.log ('Play AB END');\n     return;\n   } // end playing\n\n    return;\n  }\n\n\n    return;\n  } // end handlePlay()\n\n  handleSaveA(event) { \n\n    const {audioBuffer} = this.params;\n\n    if (this.state.isPlayng) return;\n\n    console.log ('handleSaveA');\n\n    const offlineCtx = new OfflineAudioContext(\n       audioBuffer.numberOfChannels,\n       parseInt(audioBuffer.length*(100.0/this.state.playSpeed)),\n       audioBuffer.sampleRate);\n\n    shifter = new PitchShifter(offlineCtx, audioBuffer, 512);\n    shifter.tempo = this.state.playSpeed/100.0;\n    shifter.pitch = Math.pow(2.0,this.state.playPitch/12.0);\n  //  shifter.connect(gainNode); // offlineAudiocontext cannot use gainNode\n\n    this.params.isPlaying = true;\n    shifter.connect(offlineCtx.destination);\n    offlineCtx.startRendering();\n\n    offlineCtx.oncomplete = function(e) {\n      console.log('offline rendering complete:', e.renderedBuffer);\n      let source = audioCtx.createBufferSource();\n      source.buffer = e.renderedBuffer;\n      // source.buffer = audioBuffer;\n      source.connect(audioCtx.destination);\n      source.start();\n\n//      this.fakeDownload(e.renderedBuffer);\n    }.bind(this);\n\n  }\n\n  fakeDownload(audioBuffer){\n    console.log('fakeDownload');\n\n    const words = this.params.filename.split('.');\n    let outFileName = \n         words[0]\n       + '&s' + parseInt(this.state.playSpeed)\n       + '&p' + parseInt(this.state.playPitch*100)\n       + '.wav';\n    let blob = new Blob([toWav(audioBuffer)], {type: 'audio/wav'});\n    saveAs(blob,outFileName);\n\n    console.log('fakeDownLoad end', outFileName);\n  }\n\n  handleSaveB(event) { \n    console.log ('handleSaveB');\n\n    if (event.target.name !== 'save') return;\n\n    const {audioBuffer} = this.params;\n\n    if (this.state.saveButtonStr === 'AbortExport') {\n      shifter.disconnect();\n      shifter.off();\n      this.params.isPlaying = false;\n      this.setState({saveButtonStr: 'ExportWav'});\n      console.log ('handleSaveB: AbortExport');\n      return;\n    }\n\n    if (this.state.saveButtonStr !== 'ExportWav') return;\n\n    console.log ('handleSaveB: ExportWav', 'playing', this.params.isPlaying);\n\n    if (this.params.isPlaying) return;\n\n// Unlock iOS \n   if (iOS){\n     let buffer = audioCtx.createBuffer(1,1,44100); \n     let source = audioCtx.createBufferSource();\n     source.buffer = buffer;\n     source.connect (audioCtx.destination);\n     source.start();\n   }\n// End unlock\n\n// https://www.gmass.co/blog/record-audio-mobile-web-page-ios-android/\n// https://developer.mozilla.org/en-US/docs/Web/API/ScriptProcessorNode/onaudioprocess\n\n    let saverNode = null;\n    let bufferSize = 4096;\n    let channels = audioBuffer.numberOfChannels;\n\n    shifter = new PitchShifter(audioCtx, audioBuffer, bufferSize);\n    shifter.tempo = this.state.playSpeed/100.0;\n    shifter.pitch = Math.pow(2.0,this.state.playPitch/12.0);\n\n    if (audioCtx.createJavaScriptNode) {\n      saverNode = audioCtx.createJavaScriptNode(bufferSize,channels,channels);\n    } else if (audioCtx.createScriptProcessor) {\n      saverNode = audioCtx.createScriptProcessor(bufferSize,channels,channels);\n    } else {\n      console.log ('createScript is not supported');\n      return;\n    }\n\n/* Storage */\n\n    this.params.exportBuffer = audioCtx.createBuffer( \n      channels, \n      parseInt(audioBuffer.length*(100/this.state.playSpeed)), \n      audioBuffer.sampleRate);\n    this.params.exportDataL = new Float32Array(this.params.exportBuffer.length);\n    this.params.exportDataR = new Float32Array(this.params.exportBuffer.length);\n\n    this.params.save = true;\n\n/* Script Processor */\n    let index = 0;\n    saverNode.onaudioprocess = function(event){\n      let inputBuffer = event.inputBuffer;\n      let outputBuffer = event.outputBuffer;\n\n      for (let channel = 0; channel < inputBuffer.numberOfChannels; channel++){\n         let inputData = inputBuffer.getChannelData(channel);\n         let outputData = outputBuffer.getChannelData(channel);\n\n        for (let sample = 0; sample < inputBuffer.length; sample++) {\n          outputData[sample] = inputData[sample];\n          if (channel === 0) \n             this.params.exportDataL[index + sample] = inputData[sample];\n          else \n             this.params.exportDataR[index + sample] = inputData[sample];\n        }\n      }\n\n      index += inputBuffer.length;\n\n    }.bind(this);\n\n    shifter.on('play', detail => {\n      let setTime = parseFloat(detail.timePlayed);\n      this.setState({playingAt: setTime}); \n      // if(!iOS) \n      this.setState({playingAtSlider: setTime});\n\n      if (detail.percentagePlayed === 100) {\n          shifter.disconnect(); shifter.off();\n\n/* Safari does not implement copyToChannel() */\n/*\n          this.params.exportBuffer.copyToChannel(this.params.exportDataL,0,0)\n          this.params.exportBuffer.copyToChannel(this.params.exportDataR,1,0)\n*/\n\n       let tmp = this.params.exportBuffer.getChannelData(0);\n       for (let sample=0; sample < this.params.exportDataL.length; sample++) \n           tmp[sample] = this.params.exportDataL[sample];\n\n       if (this.params.exportBuffer.numberOfChannels >= 2) {\n        tmp = this.params.exportBuffer.getChannelData(1);\n        for (let sample=0; sample < this.params.exportDataR.length; sample++) \n           tmp[sample] = this.params.exportDataR[sample];\n       }\n\n         this.fakeDownload(this.params.exportBuffer);\n         this.params.save = false;\n         this.setState({saveButtonStr: 'ExportWav'});\n         this.params.isPlaying = false;\n\n       } // end 100%\n     });\n\n    this.params.isPlaying = true;\n    shifter.connect(saverNode);\n    saverNode.connect(gainNode);\n    gainNode.connect(audioCtx.destination);\n\n    this.setState({saveButtonStr: 'AbortExport'});\n    console.log ('handleSaveB: ExportWav END');\n\n    return;\n  } // end handleSaveB\n\n  handleLoop(event) {\n    console.log ('handleLoop');\n\n    if (event.target.name === 'setA') {\n      this.setState ({timeA: this.state.playingAtSlider});\n    }\n    if (event.target.name === 'setB'){\n      if (this.state.playingAt >=  this.state.timeA)\n        this.setState ({timeB: parseFloat(this.state.playingAt)});\n      else\n        this.setState ({timeB: parseFloat(this.state.timeA) + parseFloat(10)});\n    }\n\n    if (event.target.name === 'LoopAB'){\n\n      if (this.state.loopButtonStr === 'LoopAB'){ \n        console.log ('handleLoop: LoopAB', 'playing', this.params.isPlaying);\n\n        if (this.params.isPlaying) return;\n\n        if (shifter){\n          shifter.disconnect();\n          shifter.off();\n        }\n\n        this.setState ({loopButtonStr: 'StopLoop'});\n        this.params.loop = true;\n        this.handlePlay({target: {name: 'LoopAB'}});\n\n      } \n      else if (this.state.loopButtonStr === 'StopLoop'){\n        console.log ('handleLoop: StopLoop',  \n                 'playing', this.params.isPlaying);\n        if (!this.params.isPlaying) return;\n\n        if (shifter){\n          shifter.disconnect();\n          shifter.off();\n          shifter = null;\n        }\n\n        this.params.loop = false;\n        this.params.isPlaying = false;\n        this.setState ({loopButtonStr: 'LoopAB'});\n      }\n    }\n\n// reset\n    if (event.target.name === 'reset') {\n      console.log ('handleLoop: reset')\n\n      if (shifter) { shifter.disconnect(); shifter.off(); shifter = null; }\n      this.setState({startButtonStr: 'PlayFromA', \n          playingAt: 0, timeA: 0, timeB: this.params.audioBuffer.duration})\n      this.setState({playingAtSlider: 0});\n\n      this.params.loop = false;\n      this.params.isPlaying = false;\n      this.setState ({loopButtonStr: 'LoopAB'});\n\n    return;\n   } // end reset\n  }\n \n} // end class\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}