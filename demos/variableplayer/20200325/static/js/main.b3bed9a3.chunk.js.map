{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["audioCtx","gainNode","version","packageJSON","homepage","subversion","slice","window","AudioContext","webkitAudioContext","shifter","App","props","params","filename","undefined","audioBuffer","loop","exportDataL","exportDataR","exportBuffer","save","state","playingAt","timeA","timeB","playSpeed","playPitch","playPitchSemi","playPitchCents","playVolume","startButtonStr","loopButtonStr","saveButtonStr","setState","bind","handleWindowClose","loadFile","fetchFile","handleSpeedSlider","handlePitchSlider","handleTimeSlider","handleVolumeSlider","handlePlay","handleSaveA","handleSaveB","fakeDownload","timer","handleLoop","event","close","createGain","addEventListener","this","removeEventListener","clearInterval","intervalId","parseFloat","timePlayed","percentagePlayed","target","name","copyToChannel","duration","className","type","accept","onChange","min","max","value","Math","round","step","onClick","href","rel","files","length","totalTime","file","reader","FileReader","onload","e","decodeAudioData","result","error","console","log","err","readAsArrayBuffer","keyCode","charCode","url","off","fetch","then","response","arrayBuffer","buffer","tempo","pitchSemi","pitch","pow","vol","gain","createBuffer","source","createBufferSource","connect","destination","start","partialAudioBuffer","sampleRate","left","getChannelData","right","subarray","numberOfChannels","PitchShifter","setInterval","PlayingAt","disconnect","offlineCtx","OfflineAudioContext","parseInt","startRendering","oncomplete","renderedBuffer","outFileName","split","blob","Blob","toWav","saveAs","saverNode","channels","createJavaScriptNode","createScriptProcessor","Float32Array","index","onaudioprocess","inputBuffer","outputBuffer","channel","inputData","outputData","sample","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b3bed9a3.chunk.js","sourcesContent":["import React, { Component } from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport {PitchShifter} from 'soundtouchjs'\nimport packageJSON from '../package.json'\nimport {saveAs} from 'file-saver';\nimport * as toWav from 'audiobuffer-to-wav';\n\nconst version = (packageJSON.homepage + packageJSON.subversion).slice(-10)\nconst homepage = 'https://goto920.github.io/demos/variableplayer/'\n\nwindow.AudioContext = window.AudioContext || window.webkitAudioContext\n\nvar audioCtx;\nvar gainNode;\n// =  audioCtx.createGain()\nvar shifter = null // null\n\nclass App extends Component {\n\n  constructor (props){\n    super(props)\n\n    this.params = {\n      filename: undefined,\n      audioBuffer: undefined,\n      loop: false,\n      exportDataL: undefined,\n      exportDataR: undefined,\n      exportBuffer: undefined,\n      save: false\n    }\n\n    this.state = {\n      playingAt: 0,\n      timeA: 0,\n      timeB: 0,\n      playSpeed: 100, // in percent\n      playPitch: 0, // in semi-tone (real value)\n      playPitchSemi: 0, // in semi-tone (integer part)\n      playPitchCents: 0, // percent for one semitone\n      playVolume: 80, // in percent\n      startButtonStr: 'loadFile!', \n      loopButtonStr: 'LoopAB',\n      saveButtonStr: 'Save'\n    }\n\n    this.setState = this.setState.bind(this)\n    this.handleWindowClose = this.handleWindowClose.bind(this)\n    this.loadFile = this.loadFile.bind(this)\n    this.fetchFile = this.fetchFile.bind(this)\n    this.handleSpeedSlider = this.handleSpeedSlider.bind(this)\n    this.handlePitchSlider = this.handlePitchSlider.bind(this)\n    this.handleTimeSlider = this.handleTimeSlider.bind(this)\n    this.handleVolumeSlider = this.handleVolumeSlider.bind(this)\n    this.handlePlay = this.handlePlay.bind(this);\n    this.handleSaveA = this.handleSaveA.bind(this);\n    this.handleSaveB = this.handleSaveB.bind(this);\n    this.fakeDownload = this.fakeDownload.bind(this);\n    this.timer = this.timer.bind(this);\n    this.handleLoop = this.handleLoop.bind(this);\n    \n  } // end constructor\n\n  handleWindowClose(event) { \n    audioCtx.close()\n  }\n\n  componentDidMount () { // after render()\n    audioCtx = new window.AudioContext()\n    gainNode = audioCtx.createGain()\n    window.addEventListener('beforeClosing', this.handleWindowClose)\n  }\n\n  componentWillUnmount () { // before closing app\n    window.removeEventListener('beforeClosing', this.handleWindowClose)\n    clearInterval(this.state.intervalId);\n  }\n\n  timer(){\n    if (shifter !== null ) {\n      this.setState({playingAt: \n         parseFloat(this.state.timeA) + parseFloat(shifter.timePlayed)});\n      if (shifter.percentagePlayed === 100) \n        if (this.params.loop)\n           this.handlePlay({target: {name: 'LoopAB'}});\n        else {\n          clearInterval(this.state.intervalId);\n          if (this.params.save){ \n            this.params.exportBuffer.copyToChannel(\n               this.params.exportDataL,0,0)\n            this.params.exportBuffer.copyToChannel(\n               this.params.exportDataR,1,0)\n\n            this.fakeDownload(this.params.exportBuffer);\n            this.params.save = false;\n            this.setState({saveButtonStr: 'Save'});\n          }\n        }\n    }\n\n  } // end timer\n\n  render() {\n    const {loadFile, fetchFile, \n           handleSpeedSlider, handlePitchSlider, handleVolumeSlider, \n           handleTimeSlider, handlePlay, handleSaveA, handleSaveB, handleLoop} = this\n    const {playingAt, timeA, timeB,\n           playSpeed, playPitch, playPitchSemi, playPitchCents,\n           playVolume, startButtonStr, loopButtonStr, saveButtonStr} \n           = this.state\n\n    let duration = 0;\n    if (this.params.audioBuffer !== undefined) \n       duration = this.params.audioBuffer.duration\n\n    return (\n      <div className=\"App\">\n      Variable speed/pitch audio player<br /> \n      with soundtouchjs by KG\n      <hr />\n      Input Audio (local file): <br />\n        <span className='selectFile'>\n        <input type='file' name='loadFile' \n        accept='audio/*' onChange={loadFile} /><br />\n        </span>\n{/*\n        <span className='selectFile'>\n        URL and Enter <input type='url' name='fetchFile' \n        accept='audio/*' onKeyPress={fetchFile} />\n        </span>\n*/}\n      <hr />\n\n      Speed(%): {playSpeed} <br />\n        <span className='slider'> \n         <center>\n         025<input type='range' name='speedSlider' min='25' max='200'\n         value = {playSpeed} onChange={handleSpeedSlider} />200 \n         </center>\n        </span>\n      <hr />\n      Pitch (semi-tone): {playPitch} <br />\n        <span className='slider'> \n         <center>\n         -12<input type='range' name='pitchSliderSemi' min='-12' max='12'\n         value = {playPitchSemi} onChange={handlePitchSlider} />12<br />\n         -100<input type='range' name='pitchSliderCents' min='-100' max='100'\n         value = {playPitchCents} onChange={handlePitchSlider} />100<br />\n         </center>\n\n        </span>\n      <hr />\n        Time: {Math.round(playingAt)}<br />\n        <span className='slider'> \n        <center>\n        0<input type='range' name='timeSlider'\n        min='0' max={duration}\n        value = {playingAt} step='1'\n        onChange={handleTimeSlider} />\n        {Math.round(duration)}<br />\n        </center>\n        <button name='setA' onClick={handleLoop} >setA</button>\n        : {Math.round(timeA*10)/10} &nbsp;&nbsp;\n        <button name='setB' onClick={handleLoop} >setB</button>\n        : {Math.round(timeB*10)/10}\n        </span>\n        <hr />\n      Volume: {playVolume}<br />\n        <span className='slider'> \n         <center>\n         0<input type='range' name='volumeSlider' min='0' max='150'\n         value = {playVolume} onChange={handleVolumeSlider} />150<br />\n         </center>\n        </span>\n      <hr />\n\n      <span>\n        <button name='startPause' onClick={handlePlay}> \n        {startButtonStr}\n        </button> &nbsp;&nbsp;\n        <button name='LoopAB' onClick={handleLoop} >\n        {loopButtonStr}</button> &nbsp;&nbsp;\n        <button name='reset' onClick={handlePlay}> \n        ResetAB\n        </button> <hr />\n        <button name='save' onClick={handleSaveB}> \n        {saveButtonStr}\n        </button>\n      </span>\n      <hr />\n        Version: {version}, &nbsp;\n        <a href={homepage} \n         target=\"_blank\" rel=\"noopener noreferrer\">Manual/Update</a>\n      </div>\n    ) // end return\n\n  } // end render()\n\n///////////////////////////////////////////////////\n\n  loadFile (event) {\n   if (event.target.name !== 'loadFile') return\n   if (event.target.files.length === 0) return\n\n   this.setState({totalTime: 0})\n   this.setState({startButtonStr: 'loadFile!'})\n   let file = event.target.files[0]\n   this.params.filename = file.name;\n\n   let reader = new FileReader()\n\n   reader.onload = function (e) {\n\n      audioCtx.decodeAudioData(reader.result, \n        function(audioBuffer) {\n          this.params.audioBuffer = audioBuffer\n          this.setState({startButtonStr: 'PlayFromA', playingAt: 0})\n          this.setState({timeA: 0})\n          this.setState({timeB: audioBuffer.duration})\n//          console.log (\"read\")\n        }.bind(this),\n        function (error) { console.log (\"Filereader error: \" + error.err) })\n\n   }.bind(this)\n\n   reader.readAsArrayBuffer(file)\n\n } // end loadFile()\n   \nfetchFile (event) {\n\n   if (event.target.name !== 'fetchFile') return\n\n   let code = event.keyCode || event.charCode \n   if (code !== 13) return\n\n//   console.log (\"Got enter\")\n\n   let url = event.target.value \n   this.setState({startButtonStr: 'loadFile!'})\n\n   if (shifter) { shifter.off() }\n   console.log('fetchFile: ' + url);\n\n   fetch(url)\n     .then(response => response.arrayBuffer())\n     .then(buffer => {\n       audioCtx.decodeAudioData(buffer, audioBuffer => {\n          this.params.audioBuffer = audioBuffer;\n          this.setState({startButtonStr: 'PlayFromA'});\n          this.setState({timeA: 0, timeB: audioBuffer.duration});\n       })  // end decode \n     }) // end then\n\n} // end fetchFile()\n\n// UI handlers\n  handleSpeedSlider(event) { \n     if (event.target.name !== 'speedSlider') return\n     if (shifter) shifter.tempo = event.target.value/100.0\n     this.setState({playSpeed: event.target.value})\n  }\n\n  handlePitchSlider(event) { \n\n     let pitchSemi\n\n     if (event.target.name === 'pitchSliderSemi' ){\n       pitchSemi = event.target.value*1.0 + this.state.playPitchCents/100.0\n       this.setState({playPitchSemi: event.target.value})\n     } \n\n     if (event.target.name === 'pitchSliderCents' ){\n       pitchSemi = this.state.playPitchSemi*1.0 + event.target.value/100.0\n       this.setState({playPitchCents: event.target.value})\n     }\n\n     if (shifter) {\n       shifter.pitch = Math.pow(2.0, pitchSemi/12.0)\n     }\n\n     this.setState({playPitch: pitchSemi})\n\n  }\n\n  handleTimeSlider(event) { \n\n     if (event.target.name !== 'timeSlider') return\n\n     if (this.state.startButtonStr === 'PlayFromA') {\n        this.setState({playingAt: event.target.value});\n     }\n  }\n\n  handleVolumeSlider(event) { \n     if (event.target.name !== 'volumeSlider') return\n     let vol = event.target.value*1.0\n     gainNode.gain.value = vol/100.0\n     this.setState({playVolume: vol})\n  }\n\n  handlePlay(event) { \n\n     const {audioBuffer} = this.params;\n//     const {timeA, timeB} = this.state;\n\n// Unlock iOS \n     let buffer = audioCtx.createBuffer(1,1,44100); \n     let source = audioCtx.createBufferSource();\n     source.buffer = buffer;\n     source.connect (audioCtx.destination);\n     source.start();\n// End unlock\n\n     let timeB = this.state.timeB;\n     let timeA = this.state.timeA;\n\n     if (event.target.name === 'LoopAB') {\n       if (timeB <= timeA) timeB = timeA + 10;\n\n       let partialAudioBuffer = \n          audioCtx.createBuffer(2,\n           (timeB-timeA)*audioBuffer.sampleRate, \n           audioBuffer.sampleRate);\n       let left  = audioBuffer.getChannelData(0);\n       let right = audioBuffer.getChannelData(1);\n\n       left  = left.subarray(\n         timeA*audioBuffer.sampleRate, timeB*audioBuffer.sampleRate);\n         partialAudioBuffer.copyToChannel(left,0,0);\n\n       if (audioBuffer.numberOfChannels === 2) {\n         right = right.subarray(\n         timeA*audioBuffer.sampleRate, timeB*audioBuffer.sampleRate);\n         partialAudioBuffer.copyToChannel(right,1,0);\n       }\n\n       shifter = new PitchShifter(audioCtx, partialAudioBuffer, 4096)\n       shifter.tempo = this.state.playSpeed/100.0\n       shifter.pitch = Math.pow(2.0,this.state.playPitch/12.0)\n\n       shifter.connect(gainNode)\n       gainNode.connect(audioCtx.destination)\n\n       let intervalId = setInterval(this.timer, 1000);\n       this.setState({intervalId: intervalId});\n\n     } // end ABloop\n\n     if (event.target.name === 'startPause') {\n\n       if (this.state.startButtonStr === 'Pause'){\n\n         this.setState({timeA: this.state.playingAt});\n         clearInterval(this.state.intervalId);\n\n         if (shifter === null) return\n          this.setState({PlayingAt: \n            parseFloat(timeA) + parseFloat(shifter.timePlayed)});\n\n          shifter.disconnect();\n          shifter.off();\n          shifter = null;\n          this.setState({ startButtonStr: 'PlayFromA' })\n\n       } \n\n       if (this.state.startButtonStr === 'PlayFromA') {\n         if (this.state.loopButtonStr !== 'LoopAB') return;\n\n         let partialAudioBuffer = \n            audioCtx.createBuffer(2,\n             (audioBuffer.duration - this.state.timeA)\n              *audioBuffer.sampleRate, \n              audioBuffer.sampleRate);\n         let left  = audioBuffer.getChannelData(0);\n         let right = audioBuffer.getChannelData(1);\n\n         left  = left.subarray(\n           this.state.timeA*audioBuffer.sampleRate, \n           audioBuffer.duration*audioBuffer.sampleRate);\n           partialAudioBuffer.copyToChannel(left,0,0);\n\n         if (audioBuffer.numberOfChannels === 2) {\n           right = right.subarray(\n           this.state.timeA*audioBuffer.sampleRate, \n           audioBuffer.duration*audioBuffer.sampleRate);\n           partialAudioBuffer.copyToChannel(right,1,0);\n         }\n\n       shifter = new PitchShifter(audioCtx, partialAudioBuffer, 4096)\n       shifter.tempo = this.state.playSpeed/100.0\n       shifter.pitch = Math.pow(2.0,this.state.playPitch/12.0)\n\n       shifter.connect(gainNode)\n       gainNode.connect(audioCtx.destination)\n\n       let intervalId = setInterval(this.timer, 1000);\n       this.setState({intervalId: intervalId});\n       this.setState({startButtonStr: 'Pause'});\n\n       }\n\n     } \n\n     if (event.target.name === 'reset') {\n\n        if (shifter) {\n          shifter.disconnect();\n          shifter.off();\n          shifter = null; // null\n          clearInterval(this.state.intervalId);\n        }\n\n        this.setState({startButtonStr: 'PlayFromA', \n          playingAt: 0, timeA: 0, timeB: audioBuffer.duration})\n\n     } // end if\n\n  } // end handlePlay()\n\n  handleSaveA(event) { \n\n    const {audioBuffer} = this.params;\n    if (this.state.startButtonStr !== 'PlayFromA'\n       || this.state.loopButtonStr !== 'LoopAB') return;\n\n    console.log ('handleSaveA');\n\n    const offlineCtx = new OfflineAudioContext(\n       audioBuffer.numberOfChannels,\n       parseInt(audioBuffer.length*(100.0/this.state.playSpeed)),\n       audioBuffer.sampleRate);\n\n    shifter = new PitchShifter(offlineCtx, audioBuffer, 512);\n    shifter.tempo = this.state.playSpeed/100.0;\n    shifter.pitch = Math.pow(2.0,this.state.playPitch/12.0);\n  //  shifter.connect(gainNode); // offlineAudiocontext cannot use gainNode\n    shifter.connect(offlineCtx.destination);\n\n    offlineCtx.startRendering();\n\n    offlineCtx.oncomplete = function(e) {\n      console.log('offline rendering complete:', e.renderedBuffer);\n      let source = audioCtx.createBufferSource();\n      source.buffer = e.renderedBuffer;\n      // source.buffer = audioBuffer;\n      source.connect(audioCtx.destination);\n      source.start();\n\n//      this.fakeDownload(e.renderedBuffer);\n    }.bind(this);\n\n  }\n\n  fakeDownload(audioBuffer){\n   // let blob = new Blob(, {type: 'audio/wav'})\n    const words = this.params.filename.split('.');\n    let outFileName = \n         words[0]\n       + '&s' + parseInt(this.state.playSpeed)\n       + '&p' + parseInt(this.state.playPitch*100)\n       + '.wav';\n    let blob = new Blob([toWav(audioBuffer)], {type: 'audio/wav'});\n\n    saveAs(blob,outFileName);\n\n    console.log('Output ', outFileName);\n\n  }\n\n  handleSaveB(event) { \n\n    const {audioBuffer} = this.params;\n    if (this.state.startButtonStr !== 'PlayFromA'\n       || this.state.loopButtonStr !== 'LoopAB') return;\n    if (this.params.save) return;\n\n    console.log ('handleSaveB');\n\n// https://www.gmass.co/blog/record-audio-mobile-web-page-ios-android/\n// https://developer.mozilla.org/en-US/docs/Web/API/ScriptProcessorNode/onaudioprocess\n\n    let saverNode = null;\n    let bufferSize = 4096;\n    let channels = audioBuffer.numberOfChannels;\n\n    shifter = new PitchShifter(audioCtx, audioBuffer, bufferSize);\n    shifter.tempo = this.state.playSpeed/100.0;\n    shifter.pitch = Math.pow(2.0,this.state.playPitch/12.0);\n    // shifter.connect(gainNode); // gainNode does not work for offline \n\n    if (audioCtx.createJavaScriptNode) {\n      saverNode = audioCtx.createJavaScriptNode(bufferSize,channels,channels);\n    } else if (audioCtx.createScriptProcessor) {\n      saverNode = audioCtx.createScriptProcessor(bufferSize,channels,channels);\n    } else {\n      console.log ('createScript is not supported');\n      return;\n    }\n\n/* Storage */\n\n    this.params.exportBuffer = audioCtx.createBuffer( \n      channels, \n      parseInt(audioBuffer.length*(100/this.state.playSpeed)), \n      audioBuffer.sampleRate);\n    this.params.exportDataL = new Float32Array(this.params.exportBuffer.length);\n    this.params.exportDataR = new Float32Array(this.params.exportBuffer.length);\n\n    this.params.save = true;\n\n/* Script Processor */\n    let index = 0;\n    saverNode.onaudioprocess = function(event){\n      let inputBuffer = event.inputBuffer;\n      let outputBuffer = event.outputBuffer;\n\n\n      for (let channel = 0; channel < inputBuffer.numberOfChannels; channel++){\n         let inputData = inputBuffer.getChannelData(channel);\n         let outputData = outputBuffer.getChannelData(channel);\n\n        for (let sample = 0; sample < inputBuffer.length; sample++) {\n          outputData[sample] = inputData[sample];\n          if (channel === 0) \n             this.params.exportDataL[index + sample] = inputData[sample];\n          else \n             this.params.exportDataR[index + sample] = inputData[sample];\n        }\n      }\n\n      index += inputBuffer.length;\n\n    }.bind(this);\n\n    shifter.connect(saverNode);\n    saverNode.connect(gainNode);\n    gainNode.connect(audioCtx.destination);\n\n    let intervalId = setInterval(this.timer, 1000);\n    this.setState({intervalId: intervalId, saveButtonStr: 'Please Wait!'});\n\n  } // end handleSaveB\n\n  handleLoop(event) {\n\n    if (event.target.name === 'setA') {\n      this.setState ({timeA: this.state.playingAt});\n    }\n    if (event.target.name === 'setB'){\n      if (this.state.playingAt >=  this.state.timeA)\n        this.setState ({timeB: parseFloat(this.state.playingAt)});\n      else\n        this.setState ({timeB: parseFloat(this.state.timeA) + parseFloat(10)});\n    }\n\n    if (event.target.name === 'LoopAB'){\n\n      if (this.state.loopButtonStr === 'LoopAB'){ \n        if (this.state.startButtonStr !== 'PlayFromA') return;\n\n        if (shifter){\n          shifter.disconnect();\n          shifter.off();\n        }\n\n        this.setState ({loopButtonStr: 'StopLoop'});\n        this.params.loop = true;\n        this.handlePlay({target: {name: 'LoopAB'}});\n\n      } \n      else if (this.state.loopButtonStr === 'StopLoop'){\n\n        if (shifter){\n          shifter.disconnect();\n          shifter.off();\n        }\n\n        clearInterval(this.state.intervalId);\n        this.params.loop = false;\n        this.setState ({loopButtonStr: 'LoopAB'});\n      }\n    }\n  }\n \n} // end class\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}