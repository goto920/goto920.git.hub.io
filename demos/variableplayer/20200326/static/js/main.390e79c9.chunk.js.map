{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["version","packageJSON","homepage","subversion","slice","window","AudioContext","webkitAudioContext","setTimeout","audioCtx","gainNode","__nativeSI__","setInterval","vCallback","nDelay","oThis","this","aArgs","Array","prototype","call","arguments","Function","apply","shifter","App","props","params","filename","undefined","audioBuffer","loop","exportDataL","exportDataR","exportBuffer","save","state","playingAt","timeA","timeB","playSpeed","playPitch","playPitchSemi","playPitchCents","playVolume","startButtonStr","loopButtonStr","saveButtonStr","setState","bind","handleWindowClose","loadFile","fetchFile","fetchFileB","handleSpeedSlider","handlePitchSlider","handleTimeSlider","handleVolumeSlider","handlePlay","handleSaveA","handleSaveB","fakeDownload","timer","handleLoop","event","close","createGain","addEventListener","removeEventListener","clearInterval","intervalId","parseFloat","timePlayed","percentagePlayed","target","name","copyToChannel","duration","className","type","accept","onChange","min","max","value","Math","round","step","onClick","href","rel","files","length","totalTime","file","reader","FileReader","onload","e","decodeAudioData","result","error","console","log","err","readAsArrayBuffer","keyCode","charCode","url","off","req","XMLHttpRequest","open","responseType","status","getResponsHeader","send","fetch","method","mode","redirect","then","response","headers","catch","tempo","pitchSemi","pitch","pow","vol","gain","buffer","createBuffer","source","createBufferSource","connect","destination","start","partialAudioBuffer","sampleRate","left","getChannelData","right","subarray","numberOfChannels","PitchShifter","PlayingAt","disconnect","offlineCtx","OfflineAudioContext","parseInt","startRendering","oncomplete","renderedBuffer","outFileName","split","blob","Blob","toWav","saveAs","saverNode","channels","createJavaScriptNode","createScriptProcessor","Float32Array","index","onaudioprocess","inputBuffer","outputBuffer","channel","inputData","outputData","sample","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.390e79c9.chunk.js","sourcesContent":["import React, { Component } from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport {PitchShifter} from 'soundtouchjs'\nimport packageJSON from '../package.json'\nimport {saveAs} from 'file-saver';\nimport * as toWav from 'audiobuffer-to-wav';\n// import {fetch as fetchPolyfill} from 'whatwg-fetch';\n\nconst version = (packageJSON.homepage + packageJSON.subversion).slice(-10)\nconst homepage = 'https://goto920.github.io/demos/variableplayer/'\n\nwindow.AudioContext = window.AudioContext || window.webkitAudioContext\n\n////////////////\nvar __nativeST__ = window.setTimeout, __nativeSI__ = window.setInterval;\n\nwindow.setInterval = function (vCallback, nDelay \n/*, argumentToPass1, argumentToPass2, etc. */) {\n  var oThis = this, aArgs = Array.prototype.slice.call(arguments, 2);\n  return __nativeSI__(vCallback instanceof Function ? function () {\n    vCallback.apply(oThis, aArgs);\n  } : vCallback, nDelay);\n}\n//////////////\n\n\nvar audioCtx;\nvar gainNode;\n// =  audioCtx.createGain()\nvar shifter = null // null\n\nclass App extends Component {\n\n  constructor (props){\n    super(props)\n\n    this.params = {\n      filename: undefined,\n      audioBuffer: undefined,\n      loop: false,\n      exportDataL: undefined,\n      exportDataR: undefined,\n      exportBuffer: undefined,\n      save: false\n    }\n\n    this.state = {\n      playingAt: 0,\n      timeA: 0,\n      timeB: 0,\n      playSpeed: 100, // in percent\n      playPitch: 0, // in semi-tone (real value)\n      playPitchSemi: 0, // in semi-tone (integer part)\n      playPitchCents: 0, // percent for one semitone\n      playVolume: 80, // in percent\n      startButtonStr: 'loadFile!', \n      loopButtonStr: 'LoopAB',\n      saveButtonStr: 'Save'\n    }\n\n    this.setState = this.setState.bind(this)\n    this.handleWindowClose = this.handleWindowClose.bind(this)\n    this.loadFile = this.loadFile.bind(this)\n    this.fetchFile = this.fetchFile.bind(this)\n    this.fetchFileB = this.fetchFileB.bind(this)\n    this.handleSpeedSlider = this.handleSpeedSlider.bind(this)\n    this.handlePitchSlider = this.handlePitchSlider.bind(this)\n    this.handleTimeSlider = this.handleTimeSlider.bind(this)\n    this.handleVolumeSlider = this.handleVolumeSlider.bind(this)\n    this.handlePlay = this.handlePlay.bind(this);\n    this.handleSaveA = this.handleSaveA.bind(this);\n    this.handleSaveB = this.handleSaveB.bind(this);\n    this.fakeDownload = this.fakeDownload.bind(this);\n    this.timer = this.timer.bind(this);\n    this.handleLoop = this.handleLoop.bind(this);\n    \n  } // end constructor\n\n  handleWindowClose(event) { \n    audioCtx.close()\n  }\n\n  componentDidMount () { // after render()\n    audioCtx = new window.AudioContext()\n    gainNode = audioCtx.createGain()\n    window.addEventListener('beforeClosing', this.handleWindowClose)\n  }\n\n  componentWillUnmount () { // before closing app\n    window.removeEventListener('beforeClosing', this.handleWindowClose)\n    clearInterval(this.state.intervalId);\n  }\n\n  timer(){\n    if (shifter !== null ) {\n      this.setState({playingAt: \n         parseFloat(this.state.timeA) + parseFloat(shifter.timePlayed)});\n      if (shifter.percentagePlayed === 100) \n        if (this.params.loop)\n           this.handlePlay({target: {name: 'LoopAB'}});\n        else {\n          clearInterval(this.state.intervalId);\n          if (this.params.save){ \n            this.params.exportBuffer.copyToChannel(\n               this.params.exportDataL,0,0)\n            this.params.exportBuffer.copyToChannel(\n               this.params.exportDataR,1,0)\n\n            this.fakeDownload(this.params.exportBuffer);\n            this.params.save = false;\n            this.setState({saveButtonStr: 'Save'});\n          }\n        }\n    }\n\n  } // end timer\n\n  render() {\n    const {loadFile, fetchFile, fetchFileB,\n           handleSpeedSlider, handlePitchSlider, handleVolumeSlider, \n           handleTimeSlider, handlePlay, handleSaveA, handleSaveB, handleLoop} = this\n    const {playingAt, timeA, timeB,\n           playSpeed, playPitch, playPitchSemi, playPitchCents,\n           playVolume, startButtonStr, loopButtonStr, saveButtonStr} \n           = this.state\n\n    let duration = 0;\n    if (this.params.audioBuffer !== undefined) \n       duration = this.params.audioBuffer.duration\n\n    return (\n      <div className=\"App\">\n      Variable speed/pitch audio player<br /> \n      with soundtouchjs by KG\n      <hr />\n      Input Audio (local file): <br />\n        <span className='selectFile'>\n        <input type='file' name='loadFile' \n        accept='audio/*' onChange={loadFile} /><br />\n        </span>\n{/*\n        <span className='selectFile'>\n        Paste URL and Enter <input type='url' name='fetchFile' \n        accept='audio/*' onKeyPress={fetchFile} />\n        </span>\n*/}\n      <hr />\n\n      Speed(%): {playSpeed} <br />\n        <span className='slider'> \n         <center>\n         025<input type='range' name='speedSlider' min='25' max='200'\n         value = {playSpeed} onChange={handleSpeedSlider} />200 \n         </center>\n        </span>\n      <hr />\n      Pitch (semi-tone): {playPitch} <br />\n        <span className='slider'> \n         <center>\n         -12<input type='range' name='pitchSliderSemi' min='-12' max='12'\n         value = {playPitchSemi} onChange={handlePitchSlider} />12<br />\n         -100<input type='range' name='pitchSliderCents' min='-100' max='100'\n         value = {playPitchCents} onChange={handlePitchSlider} />100<br />\n         </center>\n\n        </span>\n      <hr />\n        Time: {Math.round(playingAt)}<br />\n        <span className='slider'> \n        <center>\n        0<input type='range' name='timeSlider'\n        min='0' max={duration}\n        value = {playingAt} step='1'\n        onChange={handleTimeSlider} />\n        {Math.round(duration)}<br />\n        </center>\n        <button name='setA' onClick={handleLoop} >setA</button>\n        : {Math.round(timeA*10)/10} &nbsp;&nbsp;\n        <button name='setB' onClick={handleLoop} >setB</button>\n        : {Math.round(timeB*10)/10}\n        </span>\n        <hr />\n      Volume: {playVolume}<br />\n        <span className='slider'> \n         <center>\n         0<input type='range' name='volumeSlider' min='0' max='150'\n         value = {playVolume} onChange={handleVolumeSlider} />150<br />\n         </center>\n        </span>\n      <hr />\n\n      <span>\n        <button name='startPause' onClick={handlePlay}> \n        {startButtonStr}\n        </button> &nbsp;&nbsp;\n        <button name='LoopAB' onClick={handleLoop} >\n        {loopButtonStr}</button> &nbsp;&nbsp;\n        <button name='reset' onClick={handlePlay}> \n        ResetAB\n        </button> <hr />\n        <button name='save' onClick={handleSaveB}> \n        {saveButtonStr}\n        </button>\n      </span>\n      <hr />\n        Version: {version}, &nbsp;\n        <a href={homepage} \n         target=\"_blank\" rel=\"noopener noreferrer\">Manual/Update</a>\n      </div>\n    ) // end return\n\n  } // end render()\n\n///////////////////////////////////////////////////\n\n  loadFile (event) {\n   if (event.target.name !== 'loadFile') return\n   if (event.target.files.length === 0) return\n\n   this.setState({totalTime: 0})\n   this.setState({startButtonStr: 'loadFile!'})\n   let file = event.target.files[0]\n   this.params.filename = file.name;\n\n   let reader = new FileReader()\n\n   reader.onload = function (e) {\n\n      audioCtx.decodeAudioData(reader.result, \n        function(audioBuffer) {\n          this.params.audioBuffer = audioBuffer\n          this.setState({startButtonStr: 'PlayFromA', playingAt: 0})\n          this.setState({timeA: 0})\n          this.setState({timeB: audioBuffer.duration})\n//          console.log (\"read\")\n        }.bind(this),\n        function (error) { console.log (\"Filereader error: \" + error.err) })\n\n   }.bind(this)\n\n   reader.readAsArrayBuffer(file)\n\n } // end loadFile()\n\nfetchFileB (event) {\n  if (event.target.name !== 'fetchFile') return\n\n  let code = event.keyCode || event.charCode \n  if (code !== 13) return\n\n  console.log (\"Got enter\")\n\n  let url = event.target.value;\n  this.setState({startButtonStr: 'Loading...'})\n  if (shifter) { shifter.off() }\n  console.log('fetchFile: ' + url);\n\n// https://javascript.info/xmlhttprequest\n  let req = new XMLHttpRequest();\n  req.open(\"GET\", url);\n  req.responseType = 'arraybuffer';\n\n  req.onload = () => {\n    console.log('Loaded:', req.status);\n    console.log(req.getResponsHeader('Content-Type'));\n    console.log(req.getResponsHeader('Content-Length'));\n  }\n\n  req.send(); \n}\n   \nfetchFile (event) {\n\n   if (event.target.name !== 'fetchFile') return\n\n   let code = event.keyCode || event.charCode \n   if (code !== 13) return\n\n   console.log (\"Got enter\")\n\n   let url = event.target.value \n   this.setState({startButtonStr: 'loadFile!'})\n\n   if (shifter) { shifter.off() }\n   console.log('fetchFile: ' + url);\n\n//   fetch(url, {cache: \"no-store\"})\n// https://javascript.info/fetch-api\n   fetch(url, {\n     method: 'GET',\n     mode: 'cors',\n     redirect: 'follow'\n   })\n   .then(function(response) {\n     console.log(response.headers);\n     return response;\n   })\n   .catch((error) => console.log(error));\n\n/*\n   .then(arrayBuffer => audioCtx.decodeAudioData(arrayBuffer))\n   .then(function(decodedData) {\n       this.params.audioBuffer = decodedData;\n       this.setState({startButtonStr: 'PlayFromA'});\n       this.setState({timeA: 0, timeB: decodedData.duration});\n    }) // end then\n   .catch((error) => console.log(error));\n*/\n\n} // end fetchFile()\n\n// UI handlers\n  handleSpeedSlider(event) { \n     if (event.target.name !== 'speedSlider') return\n     if (shifter) shifter.tempo = event.target.value/100.0\n     this.setState({playSpeed: event.target.value})\n  }\n\n  handlePitchSlider(event) { \n\n     let pitchSemi\n\n     if (event.target.name === 'pitchSliderSemi' ){\n       pitchSemi = event.target.value*1.0 + this.state.playPitchCents/100.0\n       this.setState({playPitchSemi: event.target.value})\n     } \n\n     if (event.target.name === 'pitchSliderCents' ){\n       pitchSemi = this.state.playPitchSemi*1.0 + event.target.value/100.0\n       this.setState({playPitchCents: event.target.value})\n     }\n\n     if (shifter) {\n       shifter.pitch = Math.pow(2.0, pitchSemi/12.0)\n     }\n\n     this.setState({playPitch: pitchSemi})\n\n  }\n\n  handleTimeSlider(event) { \n\n     if (event.target.name !== 'timeSlider') return\n\n     if (this.state.startButtonStr === 'PlayFromA') {\n        this.setState({playingAt: event.target.value});\n     }\n  }\n\n  handleVolumeSlider(event) { \n     if (event.target.name !== 'volumeSlider') return\n     let vol = event.target.value*1.0\n     gainNode.gain.value = vol/100.0\n     this.setState({playVolume: vol})\n  }\n\n  handlePlay(event) { \n\n     const {audioBuffer} = this.params;\n//     const {timeA, timeB} = this.state;\n\n// Unlock iOS \n     let buffer = audioCtx.createBuffer(1,1,44100); \n     let source = audioCtx.createBufferSource();\n     source.buffer = buffer;\n     source.connect (audioCtx.destination);\n     source.start();\n// End unlock\n\n     let timeB = this.state.timeB;\n     let timeA = this.state.timeA;\n\n     if (event.target.name === 'LoopAB') {\n       if (timeB <= timeA) timeB = timeA + 10;\n\n       let partialAudioBuffer = \n          audioCtx.createBuffer(2,\n           (timeB-timeA)*audioBuffer.sampleRate, \n           audioBuffer.sampleRate);\n       let left  = audioBuffer.getChannelData(0);\n       let right = audioBuffer.getChannelData(1);\n\n       left  = left.subarray(\n         timeA*audioBuffer.sampleRate, timeB*audioBuffer.sampleRate);\n         partialAudioBuffer.copyToChannel(left,0,0);\n\n       if (audioBuffer.numberOfChannels === 2) {\n         right = right.subarray(\n         timeA*audioBuffer.sampleRate, timeB*audioBuffer.sampleRate);\n         partialAudioBuffer.copyToChannel(right,1,0);\n       }\n\n       shifter = new PitchShifter(audioCtx, partialAudioBuffer, 4096)\n       shifter.tempo = this.state.playSpeed/100.0\n       shifter.pitch = Math.pow(2.0,this.state.playPitch/12.0)\n\n       shifter.connect(gainNode)\n       gainNode.connect(audioCtx.destination)\n\n       let intervalId = setInterval(this.timer, 1000);\n       this.setState({intervalId: intervalId});\n\n     } // end ABloop\n\n     if (event.target.name === 'startPause') {\n\n       if (this.state.startButtonStr === 'Pause'){\n\n         this.setState({timeA: this.state.playingAt});\n         clearInterval(this.state.intervalId);\n\n         if (shifter === null) return\n          this.setState({PlayingAt: \n            parseFloat(timeA) + parseFloat(shifter.timePlayed)});\n\n          shifter.disconnect();\n          shifter.off();\n          shifter = null;\n          this.setState({ startButtonStr: 'PlayFromA' })\n\n       } \n\n       if (this.state.startButtonStr === 'PlayFromA') {\n         if (this.state.loopButtonStr !== 'LoopAB') return;\n\n         let partialAudioBuffer = \n            audioCtx.createBuffer(2,\n             (audioBuffer.duration - this.state.timeA)\n              *audioBuffer.sampleRate, \n              audioBuffer.sampleRate);\n         let left  = audioBuffer.getChannelData(0);\n         let right = audioBuffer.getChannelData(1);\n\n         left  = left.subarray(\n           this.state.timeA*audioBuffer.sampleRate, \n           audioBuffer.duration*audioBuffer.sampleRate);\n           partialAudioBuffer.copyToChannel(left,0,0);\n\n         if (audioBuffer.numberOfChannels === 2) {\n           right = right.subarray(\n           this.state.timeA*audioBuffer.sampleRate, \n           audioBuffer.duration*audioBuffer.sampleRate);\n           partialAudioBuffer.copyToChannel(right,1,0);\n         }\n\n       shifter = new PitchShifter(audioCtx, partialAudioBuffer, 4096)\n       shifter.tempo = this.state.playSpeed/100.0\n       shifter.pitch = Math.pow(2.0,this.state.playPitch/12.0)\n\n       shifter.connect(gainNode)\n       gainNode.connect(audioCtx.destination)\n\n       let intervalId = setInterval(this.timer, 1000);\n       this.setState({intervalId: intervalId});\n       this.setState({startButtonStr: 'Pause'});\n\n       }\n\n     } \n\n     if (event.target.name === 'reset') {\n\n      if (this.state.startButtonStr !== 'PlayFromA'\n       && this.state.loopButtonStr !== 'LoopAB') return;\n        \n\n        if (shifter) {\n          shifter.disconnect();\n          shifter.off();\n          shifter = null; // null\n          clearInterval(this.state.intervalId);\n        }\n\n        this.setState({startButtonStr: 'PlayFromA', \n          playingAt: 0, timeA: 0, timeB: audioBuffer.duration})\n\n     } // end if\n\n  } // end handlePlay()\n\n  handleSaveA(event) { \n\n    const {audioBuffer} = this.params;\n    if (this.state.startButtonStr !== 'PlayFromA'\n       || this.state.loopButtonStr !== 'LoopAB') return;\n\n    console.log ('handleSaveA');\n\n    const offlineCtx = new OfflineAudioContext(\n       audioBuffer.numberOfChannels,\n       parseInt(audioBuffer.length*(100.0/this.state.playSpeed)),\n       audioBuffer.sampleRate);\n\n    shifter = new PitchShifter(offlineCtx, audioBuffer, 512);\n    shifter.tempo = this.state.playSpeed/100.0;\n    shifter.pitch = Math.pow(2.0,this.state.playPitch/12.0);\n  //  shifter.connect(gainNode); // offlineAudiocontext cannot use gainNode\n    shifter.connect(offlineCtx.destination);\n\n    offlineCtx.startRendering();\n\n    offlineCtx.oncomplete = function(e) {\n      console.log('offline rendering complete:', e.renderedBuffer);\n      let source = audioCtx.createBufferSource();\n      source.buffer = e.renderedBuffer;\n      // source.buffer = audioBuffer;\n      source.connect(audioCtx.destination);\n      source.start();\n\n//      this.fakeDownload(e.renderedBuffer);\n    }.bind(this);\n\n  }\n\n  fakeDownload(audioBuffer){\n   // let blob = new Blob(, {type: 'audio/x-wav'})\n    const words = this.params.filename.split('.');\n    let outFileName = \n         words[0]\n       + '&s' + parseInt(this.state.playSpeed)\n       + '&p' + parseInt(this.state.playPitch*100)\n       + '.wav';\n    let blob = new Blob([toWav(audioBuffer)], {type: 'audio/wav'});\n\n    saveAs(blob,outFileName);\n\n    console.log('Output ', outFileName);\n\n  }\n\n  handleSaveB(event) { \n\n    const {audioBuffer} = this.params;\n    if (this.state.startButtonStr !== 'PlayFromA'\n       || this.state.loopButtonStr !== 'LoopAB') return;\n    if (this.params.save) return;\n\n    console.log ('handleSaveB');\n\n// https://www.gmass.co/blog/record-audio-mobile-web-page-ios-android/\n// https://developer.mozilla.org/en-US/docs/Web/API/ScriptProcessorNode/onaudioprocess\n\n    let saverNode = null;\n    let bufferSize = 4096;\n    let channels = audioBuffer.numberOfChannels;\n\n    shifter = new PitchShifter(audioCtx, audioBuffer, bufferSize);\n    shifter.tempo = this.state.playSpeed/100.0;\n    shifter.pitch = Math.pow(2.0,this.state.playPitch/12.0);\n    // shifter.connect(gainNode); // gainNode does not work for offline \n\n    if (audioCtx.createJavaScriptNode) {\n      saverNode = audioCtx.createJavaScriptNode(bufferSize,channels,channels);\n    } else if (audioCtx.createScriptProcessor) {\n      saverNode = audioCtx.createScriptProcessor(bufferSize,channels,channels);\n    } else {\n      console.log ('createScript is not supported');\n      return;\n    }\n\n/* Storage */\n\n    this.params.exportBuffer = audioCtx.createBuffer( \n      channels, \n      parseInt(audioBuffer.length*(100/this.state.playSpeed)), \n      audioBuffer.sampleRate);\n    this.params.exportDataL = new Float32Array(this.params.exportBuffer.length);\n    this.params.exportDataR = new Float32Array(this.params.exportBuffer.length);\n\n    this.params.save = true;\n\n/* Script Processor */\n    let index = 0;\n    saverNode.onaudioprocess = function(event){\n      let inputBuffer = event.inputBuffer;\n      let outputBuffer = event.outputBuffer;\n\n\n      for (let channel = 0; channel < inputBuffer.numberOfChannels; channel++){\n         let inputData = inputBuffer.getChannelData(channel);\n         let outputData = outputBuffer.getChannelData(channel);\n\n        for (let sample = 0; sample < inputBuffer.length; sample++) {\n          outputData[sample] = inputData[sample];\n          if (channel === 0) \n             this.params.exportDataL[index + sample] = inputData[sample];\n          else \n             this.params.exportDataR[index + sample] = inputData[sample];\n        }\n      }\n\n      index += inputBuffer.length;\n\n    }.bind(this);\n\n    shifter.connect(saverNode);\n    saverNode.connect(gainNode);\n    gainNode.connect(audioCtx.destination);\n\n    let intervalId = setInterval(this.timer, 1000);\n    this.setState({intervalId: intervalId, saveButtonStr: 'Please Wait!'});\n\n  } // end handleSaveB\n\n  handleLoop(event) {\n\n    if (event.target.name === 'setA') {\n      this.setState ({timeA: this.state.playingAt});\n    }\n    if (event.target.name === 'setB'){\n      if (this.state.playingAt >=  this.state.timeA)\n        this.setState ({timeB: parseFloat(this.state.playingAt)});\n      else\n        this.setState ({timeB: parseFloat(this.state.timeA) + parseFloat(10)});\n    }\n\n    if (event.target.name === 'LoopAB'){\n\n      if (this.state.loopButtonStr === 'LoopAB'){ \n        if (this.state.startButtonStr !== 'PlayFromA') return;\n\n        if (shifter){\n          shifter.disconnect();\n          shifter.off();\n        }\n\n        this.setState ({loopButtonStr: 'StopLoop'});\n        this.params.loop = true;\n        this.handlePlay({target: {name: 'LoopAB'}});\n\n      } \n      else if (this.state.loopButtonStr === 'StopLoop'){\n\n        if (shifter){\n          shifter.disconnect();\n          shifter.off();\n        }\n\n        clearInterval(this.state.intervalId);\n        this.params.loop = false;\n        this.setState ({loopButtonStr: 'LoopAB'});\n      }\n    }\n  }\n \n} // end class\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}