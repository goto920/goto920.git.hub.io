{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["audioCtx","gainNode","version","packageJSON","homepage","subversion","slice","window","AudioContext","webkitAudioContext","shifter","App","props","params","audioBuffer","state","playSpeed","playPitch","playPitchSemi","playPitchCents","playVolume","startButtonStr","setState","bind","handleWindowClose","loadFile","fetchFile","handleSpeedSlider","handlePitchSlider","handleVolumeSlider","handlePlay","event","close","addEventListener","this","createGain","removeEventListener","className","type","name","accept","onChange","onKeyPress","min","max","value","onClick","href","target","rel","files","length","totalTime","file","reader","FileReader","onload","e","decodeAudioData","result","PitchShifter","tempo","pitch","Math","pow","currentTime","console","log","error","err","readAsArrayBuffer","keyCode","charCode","url","off","fetch","then","response","arrayBuffer","buffer","pitchSemi","vol","gain","createBuffer","source","createBufferSource","connect","destination","start","disconnect","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b8ce6715.chunk.js","sourcesContent":["import React, { Component } from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport {PitchShifter} from 'soundtouchjs'\nimport packageJSON from '../package.json'\n\nconst version = (packageJSON.homepage + packageJSON.subversion).slice(-10)\nconst homepage = 'https://goto920.github.io/demos/variableplayer/'\n\nwindow.AudioContext = window.AudioContext || window.webkitAudioContext\n\nvar audioCtx;\nvar gainNode;\n// =  audioCtx.createGain()\nvar shifter = 0 // null\n\nclass App extends Component {\n\n  constructor (props){\n    super(props)\n\n    this.params = {\n      audioBuffer: 0\n    }\n\n    this.state = {\n      playSpeed: 100, // in percent\n      playPitch: 0, // in semi-tone (real value)\n      playPitchSemi: 0, // in semi-tone (integer part)\n      playPitchCents: 0, // percent for one semitone\n      playVolume: 70, // in percent\n      startButtonStr: 'Wait' \n    }\n\n    this.setState = this.setState.bind(this)\n    this.handleWindowClose = this.handleWindowClose.bind(this)\n    this.loadFile = this.loadFile.bind(this)\n    this.fetchFile = this.fetchFile.bind(this)\n    this.handleSpeedSlider = this.handleSpeedSlider.bind(this)\n    this.handlePitchSlider = this.handlePitchSlider.bind(this)\n//    this.handleTimeSlider = this.handleTimeSlider.bind(this)\n    this.handleVolumeSlider = this.handleVolumeSlider.bind(this)\n    this.handlePlay = this.handlePlay.bind(this)\n    \n  } // end constructor\n\n  handleWindowClose(event) { \n    audioCtx.close()\n  }\n\n  componentWillMount () { // before render()\n    window.addEventListener('beforeClosing', this.handleWindowClose)\n  }\n  \n  componentDidMount () { // after render()\n    audioCtx = new window.AudioContext()\n    gainNode = audioCtx.createGain()\n  }\n\n  componentWillUnmount () { // before closing app\n    window.removeEventListener('beforeClosing', this.handleWindowClose)\n  }\n\n\n  render() {\n    const {loadFile, fetchFile, \n           handleSpeedSlider, handlePitchSlider, handleVolumeSlider, \n           handlePlay} = this\n    const {playSpeed, playPitch, playPitchSemi, playPitchCents,\n           playVolume, startButtonStr} = this.state\n\n    return (\n      <div className=\"App\">\n      Variable speed/pitch audio player<br /> \n      with soundtouchjs by KG\n      <hr />\n      Input Audio (url or local file): <br />\n        <span className='selectFile'>\n        <input type='file' name='loadFile' \n        accept='audio/*' onChange={loadFile} /><br />\n        </span>\n        <span className='selectFile'>\n        URL and Enter <input type='url' name='fetchFile' \n        accept='audio/*' onKeyPress={fetchFile} />\n        </span>\n      <hr />\n\n      Playback Speed(%): {playSpeed} <br />\n        <span className='slider'> \n         <center>\n         025<input type='range' name='speedSlider' min='25' max='200'\n         value = {playSpeed} onChange={handleSpeedSlider} />200 \n         </center>\n        </span>\n      <hr />\n      Pitch (semi-tone): {playPitch} <br />\n        <span className='slider'> \n         <center>\n         -12<input type='range' name='pitchSliderSemi' min='-12' max='12'\n         value = {playPitchSemi} onChange={handlePitchSlider} />+12<br />\n         -100<input type='range' name='pitchSliderCents' min='-100' max='100'\n         value = {playPitchCents} onChange={handlePitchSlider} />+100<br />\n         </center>\n\n        </span>\n      <hr />\n\n      Volume: {playVolume}<br />\n        <span className='slider'> \n         <center>\n         000<input type='range' name='volumeSlider' min='0' max='150'\n         value = {playVolume} onChange={handleVolumeSlider} />150<br />\n         </center>\n        </span>\n      <hr />\n\n      <span>\n        <button name='startPause' onClick={handlePlay}> \n        {startButtonStr}\n        </button> &nbsp;&nbsp;\n        <button name='rewind' onClick={handlePlay}> \n        Rewind\n        </button> &nbsp;&nbsp;\n{/*\n        <button name='save' onClick={handlePlay}> \n        Save\n        </button>\n*/}\n\n      </span>\n      <hr />\n        Version: {version}, &nbsp;\n        <a href={homepage} \n         target=\"_blank\" rel=\"noopener noreferrer\">Manual/Update</a>\n      </div>\n    ) // end return\n\n  } // end render()\n\n///////////////////////////////////////////////////\n\n  loadFile (event) {\n   if (event.target.name !== 'loadFile') return\n   if (event.target.files.length === 0) return\n\n   this.setState({totalTime: 0})\n   this.setState({startButtonStr: 'Wait'})\n   let file = event.target.files[0]\n\n   let reader = new FileReader()\n\n   reader.onload = function (e) {\n\n      audioCtx.decodeAudioData(reader.result, \n        function(audioBuffer) {\n          shifter = new PitchShifter(audioCtx, audioBuffer, 1024)\n          shifter.tempo = this.state.playSpeed/100.0\n          shifter.pitch = Math.pow(2.0,this.state.playPitch/12.0)\n          this.setState({startButtonStr: 'Start', currentTime: 0})\n          console.log (\"read\")\n        }.bind(this),\n        function (error) { console.log (\"Filereader error: \" + error.err) })\n\n   }.bind(this)\n\n   reader.readAsArrayBuffer(file)\n\n } // end loadFile()\n   \nfetchFile (event) {\n\n   if (event.target.name !== 'fetchFile') return\n\n   let code = event.keyCode || event.charCode \n   if (code !== 13) return\n\n//   console.log (\"Got enter\")\n\n   let url = event.target.value \n   this.setState({startButtonStr: 'Wait'})\n\n   if (shifter) { shifter.off() }\n   console.log('fetchFile: ' + url)\n\n   fetch(url)\n     .then(response => response.arrayBuffer())\n     .then(buffer => {\n       audioCtx.decodeAudioData(buffer, audioBuffer => {\n          this.params.audioBuffer = audioBuffer\n          shifter = new PitchShifter(audioCtx, audioBuffer, 1024)\n          shifter.tempo = this.state.playSpeed/100.0\n          shifter.pitch = Math.pow(2.0,this.state.playPitch/12.0)\n          this.setState({startButtonStr: 'Start', currentTime: 0})\n       })  // end decode \n     }) // end then\n\n} // end fetchFile()\n\n// UI handlers\n  handleSpeedSlider(event) { \n     if (event.target.name !== 'speedSlider') return\n     if (shifter) shifter.tempo = event.target.value/100.0\n     this.setState({playSpeed: event.target.value})\n  }\n\n  handlePitchSlider(event) { \n\n     let pitchSemi\n\n     if (event.target.name === 'pitchSliderSemi' ){\n       pitchSemi = event.target.value*1.0 + this.state.playPitchCents/100.0\n       this.setState({playPitchSemi: event.target.value})\n     } \n\n     if (event.target.name === 'pitchSliderCents' ){\n       pitchSemi = this.state.playPitchSemi*1.0 + event.target.value/100.0\n       this.setState({playPitchCents: event.target.value})\n     }\n\n     if (shifter) {\n       shifter.pitch = Math.pow(2.0, pitchSemi/12.0)\n     }\n\n     this.setState({playPitch: pitchSemi})\n\n  }\n\n  handleTimeSlider(event) { \n     if (event.target.name !== 'timeSlider') return\n  }\n\n  handleVolumeSlider(event) { \n     if (event.target.name !== 'volumeSlider') return\n     let vol = event.target.value*1.0\n     gainNode.gain.value = vol/100.0\n     this.setState({playVolume: vol})\n  }\n\n  handlePlay(event) { \n\n// Unlock iOS \n     let buffer = audioCtx.createBuffer(1,1,22050); \n     let source = audioCtx.createBufferSource();\n     source.buffer = buffer;\n     source.connect (audioCtx.destination);\n     source.start();\n// End unlock\n\n     if (event.target.name === 'startPause') {\n\n       if (this.state.startButtonStr === 'Start'\n           || this.state.startButtonStr === 'Resume'){ \n\n        shifter.connect(gainNode)\n        gainNode.connect(audioCtx.destination)\n        this.setState({ startButtonStr: 'Pause' })\n\n       } else if (this.state.startButtonStr === 'Pause'){\n        if (!shifter) return\n\n        shifter.disconnect()\n        this.setState({ startButtonStr: 'Resume' })\n\n       }\n\n     } \n\n     if (event.target.name === 'rewind') {\n\n        if (!shifter) return\n        shifter.disconnect()\n        shifter.off()\n        shifter = 0 // null\n\n        shifter = new PitchShifter(audioCtx, this.params.audioBuffer, 1024)\n        shifter.tempo = this.state.playSpeed/100.0\n        shifter.pitch = Math.pow(2.0,this.state.playPitch/12.0)\n\n        this.setState({startButtonStr: 'Start', currentTime: 0})\n     } // end if\n\n     if (event.target.name === 'Save') {\n        shifter.disconnect()\n     } // end if\n\n  } // end handlePlay()\n \n} // end class\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}