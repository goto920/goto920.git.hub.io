{"version":3,"sources":["App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["version","packageJSON","subversion","window","AudioContext","webkitAudioContext","App","props","audioCtx","inputAudio","state","playingAt","timeA","timeB","startButtonStr","gains","masterGain","loadFiles","bind","handlePlay","handleGainSlider","sliders","this","map","value","index","className","name","type","id","min","max","onChange","multiple","accept","onClick","event","target","files","length","close","i","reader","FileReader","onload","e","decodeAudioData","result","audioBuffer","push","data","source","gainNode","masterGainNode","setState","duration","error","console","log","err","onerror","readAsArrayBuffer","isPlaying","resume","createBufferSource","createGain","gain","buffer","connect","destination","start","stop","suspend","isPlayng","playAB","parseInt","parseFloat","Component","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.4d7f87a2.chunk.js","sourcesContent":["import React, { Component}  from 'react';\nimport './App.css';\nimport packageJSON from '../package.json';\n\nconst version = packageJSON.subversion;\n\nwindow.AudioContext = window.AudioContext || window.webkitAudioContext;\n\nclass App extends Component {\n  constructor (props) {\n    super();\n    this.audioCtx = new AudioContext();\n    this.inputAudio = [];\n \n    this.state = {\n     playingAt: 0,\n     timeA: 0,\n     timeB: 0, \n     startButtonStr: 'load files first!',\n     gains: [],\n     masterGain: 0.7*100,\n    };\n\n    this.loadFiles = this.loadFiles.bind(this);\n    this.handlePlay = this.handlePlay.bind(this);\n    this.handleGainSlider = this.handleGainSlider.bind(this);\n  }   \n\n  render(){\n\n    const sliders = this.state.gains.map((value, index) => {\n      return (\n      <div className='slider' key={index}>\n      <center>\n      {this.inputAudio[index].name} ({this.state.gains[index]})<br />\n      0 <input type='range' id={index} name='gainSlider' \n      min='0' max='100' value={this.state.gains[index]} \n      onChange={this.handleGainSlider} /> 100\n      </center>\n      </div>\n      );\n    });\n\n    return (\n     <div className=\"App\">\n     KG's Simple Mixer\n     <span className=\"selectFile\">\n     <input type=\"file\" name=\"loadFiles\" multiple=\"multiple\"\n        accept=\"audio/*\" onChange={this.loadFiles} /><br />\n     </span>\n     <hr />\n     <button name='startPause' onClick={this.handlePlay}> \n     {this.state.startButtonStr}\n     </button> &nbsp;&nbsp;\n     <button name='reWind' onClick={this.handlePlay}>\n        Stop/Rewind</button>\n     <hr />\n     <div className='slider' key='master'>\n       <center>\n       Master Gain ({this.state.masterGain}) <br />\n       0 <input type='range' id='master' name='gainSlider' \n          min='0' max='100' value={this.state.masterGain} \n           onChange={this.handleGainSlider} /> 100\n       </center>\n     </div>\n     <hr />\n     <center>Channel Gain</center>\n     {sliders}\n     <hr />\n     Version: {version}\n     </div>\n    );\n  }\n\n  loadFiles(event){\n\n    if (event.target.name !== 'loadFiles') return;\n    if (event.target.files.length.length === 0) return;\n    const files = event.target.files; \n\n    if (this.audioCtx !== null) this.audioCtx.close();\n    this.audioCtx = new AudioContext();\n\n    this.inputAudio = []; // clear\n    const gains = [];\n    for (let i=0; i < files.length; i++){\n      const reader = new FileReader();\n\n      reader.onload = function (e){\n       this.audioCtx.decodeAudioData(reader.result,\n         function (audioBuffer) {\n           this.inputAudio.push({\n              name: files[i].name,\n              data: audioBuffer,\n              source: null,\n              gainNode: null,\n              masterGainNode: null,\n            });\n\n           gains.push(100);\n           if (i => files.length -1){\n             this.setState({\n               startButtonStr: 'Play',\n               timeA: 0,\n               playingAt: 0,\n               timeB: this.inputAudio[0].data.duration,\n               gains: gains,\n               masterGain: 0.7*100,\n             });\n           } // end if\n\n         }.bind(this),\n         function (error) { console.log (\"decode error: \" + error.err) }\n       )\n      }.bind(this)\n\n      reader.onerror = function (e){ console.log(\"File read \", reader.error);}\n\n      reader.readAsArrayBuffer(files[i]);\n\n    } // end for\n\n  } // end loadFiles()\n\n  playAB(timeA, timeB){\n    if (this.isPlaying) return;\n    if (this.audioCtx.state === 'suspended' ) this.audioCtx.resume();\n\n    for (let i=0; i < this.inputAudio.length; i++){\n\n      const source = this.audioCtx.createBufferSource();\n      const masterGainNode = this.audioCtx.createGain();\n        masterGainNode.gain.value = this.state.masterGain/100.0;\n\n      source.buffer = this.inputAudio[i].data;\n        this.inputAudio[i].source = source;\n      const gainNode = this.audioCtx.createGain();\n        gainNode.gain.value = this.state.gains[i]/100.0;\n        this.inputAudio[i].gainNode = gainNode;\n        this.inputAudio[i].masterGainNode = masterGainNode;\n      source.connect(gainNode);\n      gainNode.connect(masterGainNode);\n      masterGainNode.connect(this.audioCtx.destination);\n    }\n\n    const gains = [];\n    for (let i=0; i < this.inputAudio.length; i++)\n       gains.push(100*this.inputAudio[i].gainNode.gain.value);\n\n    this.setState({gains: gains});\n    for (let i=0; i < this.inputAudio.length; i++)\n       this.inputAudio[i].source.start();\n\n    this.isPlaying = true;\n  }\n\n  handlePlay(event){\n\n    if (event.target.name === 'startPause') {\n\n      switch(this.state.startButtonStr){\n        case 'Pause':\n          this.audioCtx.suspend();\n          this.isPlayng = false;\n          this.setState ({startButtonStr: 'Resume'});\n        break;\n\n        case 'Play': case 'Resume':\n          if (this.audioCtx.state === 'suspended') this.audioCtx.resume();\n          this.playAB (0, this.inputAudio[0].data.duration);\n          this.setState ({startButtonStr: 'Pause'})\n        break;\n\n        default:\n      }\n\n      return;\n    }\n\n    if (event.target.name === 'reWind') {\n      for (let i=0; i < this.inputAudio.length; i++)\n        this.inputAudio[i].source.stop();\n\n      this.setState ({startButtonStr: 'Play'})\n      return;\n    }    \n\n  } // end handlePlay()\n\n  handleGainSlider(event){\n    if (event.target.name !== 'gainSlider') return;\n    // console.log ('slider id= ', event.target.id);\n\n    if (event.target.id === 'master'){\n      const gain = parseFloat(event.target.value);\n      this.setState({masterGain: gain});\n      for (let index=0; index < this.inputAudio.length; index++) {\n        if (this.inputAudio[index].masterGainNode !== null)\n          this.inputAudio[index].masterGainNode.gain.value \n            = parseFloat(event.target.value/100.0); \n      }\n      return;\n    }\n\n    const index = parseInt(event.target.id);\n\n    const gains = this.state.gains;\n    gains[index] = parseInt(event.target.value);\n    this.setState({gains: gains});\n    if (this.inputAudio[index].gainNode !== null)\n      this.inputAudio[index].gainNode.gain.value \n           = parseFloat(event.target.value/100.0); \n\n  }\n\n} // end class\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\n// serviceWorkerRegistration.unregister();\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}