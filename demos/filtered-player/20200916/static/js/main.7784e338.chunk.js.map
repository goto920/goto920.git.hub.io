{"version":3,"sources":["effectorClass.js","App.js","serviceWorker.js","index.js"],"names":["Effector","shiftSize","sampleRate","this","rfft","FFTR","fftObjBuffer","lastInput","Float32Array","fill","lastOut","filterChain","calcFFT","bind","justFFT","calcPan","calcPerc","fftFilter","addFilter","clearAllFilter","presetFilter","fromPan","fromFreq","toPan","toFreq","action","fromFreqIndex","Math","min","round","toFreqIndex","push","length","inputBuffer","outputBuffer","channel","numberOfChannels","inputData","getChannelData","outputData","AudioBuffer","prototype","copyToChannel","sample","type","option","width","console","log","fftWindowInput","fftObj","pcmData","fftCoef","inverse","slice","forward","Windowing","hann","power","freqBin","pan","panAmp","percL","percR","fft","numCoef","base","innerProd","crossProd","abs","sqrt","pow","absL","absR","absLR","frac","max","isNaN","median","arr","mid","floor","nums","sort","a","b","buflen","from","to","pMedianL","pMedianR","powerArrayL","powerArrayR","time","hMedianL","hMedianR","retval","perc","splice","fftL","fftR","outL","outR","i","filter","f","version","packageJSON","homepage","subversion","jaText","messages","ja","usText","us","m","window","AudioContext","webkitAudioContext","OfflineAudioContext","webkitOfflineAudioContext","audioCtx","gainNode","effector","iOS","navigator","userAgent","match","App","props","params","inputAudio","outputAudio","filename","currentSource","isPlaying","effectNode","fftShift","filterType","vocalWidth","counter","state","playingAt","playVolume","startButtonStr","testButtonStr","saveButtonStr","loadFile","handleLang","handleTimeSlider","handleVolumeSlider","handlePlay","handleOffline","handleSave","selectFilter","fakeDownload","event","close","createGain","addEventListener","handleWindowClose","removeEventListener","duration","startBStyle","color","className","title","name","onClick","accept","onChange","defaultValue","value","toFixed","step","style","href","target","rel","guide","e","files","file","reader","FileReader","onload","decodeAudioData","result","audioBuffer","setState","error","err","readAsArrayBuffer","vol","parseInt","gain","parseFloat","source","buffer","createBuffer","createBufferSource","connect","destination","start","original","modified","channels","bufferSize","createJavaScriptNode","createScriptProcessor","onaudioprocess","process","leftOut","rightOut","processedLeft","processedRight","offset","stop","disconnect","onaudioprrocess","offlineCtx","output","input","processed","processedL","processedR","startRendering","oncomplete","outFileName","split","blob","Blob","toWav","saveAs","Component","Boolean","location","hostname","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.7784e338.chunk.js","sourcesContent":["// import {RFFT} from 'fftw-js'; // fftw-js\nimport {FFTR} from 'kissfft-js';\nimport Windowing from 'fft-windowing';\n\nclass Effector {\n\n  constructor(shiftSize,sampleRate){\n    this.shiftSize = shiftSize;\n    this.sampleRate = sampleRate;\n\n//    this.rfft = new RFFT(2*this.shiftSize); // fftw-js\n    this.rfft = new FFTR(2*this.shiftSize); // kissfft-js\n\n    this.fftObjBuffer = []; // up to 17\n\n    this.lastInput = [];\n    this.lastInput[0] = new Float32Array(shiftSize).fill(0);\n    this.lastInput[1] = new Float32Array(shiftSize).fill(0);\n\n    this.lastOut = [];\n    this.lastOut[0] = new Float32Array(shiftSize).fill(0);\n    this.lastOut[1] = new Float32Array(shiftSize).fill(0);\n\n    this.filterChain = []; \n       // fromPan, fromFreq, toPan, toFreq, action \n       // ('T': through, 'M': mute, 'P': percussive, 'H': harmonic)\n\n    this.calcFFT = this.calcFFT.bind(this); // forward FFT \n    this.justFFT = this.justFFT.bind(this); // forward FFT \n    this.calcPan = this.calcPan.bind(this); // Pan calculation\n    this.calcPerc = this.calcPerc.bind(this);\n    this.fftFilter = this.fftFilter.bind(this);\n\n    this.addFilter = this.addFilter.bind(this);\n    this.clearAllFilter = this.clearAllFilter.bind(this);\n\n    this.presetFilter = this.presetFilter.bind(this);\n\n  }\n\n  addFilter(fromPan, fromFreq, toPan, toFreq, action){ \n\n    let fromFreqIndex = Math.min(this.shiftSize, \n            Math.round(this.shiftSize*(2*fromFreq/this.sampleRate)));\n    let toFreqIndex = Math.min(this.shiftSize, \n            Math.round(this.shiftSize*(2*toFreq/this.sampleRate)));\n\n    this.filterChain.push({\n      fromPan: fromPan, fromFreqIndex: fromFreqIndex,\n      toPan: toPan, toFreqIndex: toFreqIndex,\n      action: action\n    });\n\n  }\n\n  clearAllFilter(){ this.filterChain.length = 0; }\n\n  copy(inputBuffer, outputBuffer){ // for test\n\n    for (let channel = 0; channel < inputBuffer.numberOfChannels;\n           channel++){\n      let inputData = inputBuffer.getChannelData(channel);\n      let outputData = outputBuffer.getChannelData(channel);\n\n      if (AudioBuffer.prototype.copyToChannel)\n          outputBuffer.copyToChannel(inputData, channel,0);\n      else \n         for (let sample = 0; sample < inputBuffer.length; sample++)\n              outputData[sample] = inputData[sample];\n\n    } // end for channel\n    return;\n  }\n\n  presetFilter(type, option){\n\n     this.clearAllFilter();\n     console.log('filter, option ', type, option);\n\n     let width;\n     switch (type){\n       case 'bypass': break;\n       case 'drumCover':\n         width = option;\n         this.addFilter(-1,0,1,30000,\"H\");\n         this.addFilter(-width/2,220,width/2,4000,\"T\");\n         this.addFilter(-1.0,220,-0.9,4000,\"T\");\n         this.addFilter(0.9,220,1.0,4000,\"T\");\n       break;\n       case 'karaokeMale':\n         width = option;\n         this.addFilter(-width/2,220,width/2,8000,\"M\");\n       break;\n       case 'karaokeFemale':\n         width = option;\n         this.addFilter(-width/2,350,width/2,8000,\"M\");\n       break;\n       case 'percussive':\n         this.addFilter(-1,0,1,30000,\"P\");\n       break;\n       case 'harmonic':\n         this.addFilter(-1,0,1,30000,\"H\");\n       break;\n       default:\n     }\n  }\n\n  process(inputBuffer, outputBuffer){\n\n    if (inputBuffer.numberOfChannels !== 2) return;\n\n// prepare input\n// FFT window = 2*this.shiftSize window = 2*this.shiftSize\n// channel: 0(left), 1(right)\n    let fftWindowInput = [];\n       fftWindowInput[0] = new Float32Array(this.shiftSize*2);\n       fftWindowInput[1] = new Float32Array(this.shiftSize*2);\n\n    for (let channel = 0; channel <= 1 ; channel++){\n\n      let inputData = inputBuffer.getChannelData(channel);\n\n      for (let sample = 0; sample < 2*this.shiftSize; sample++){ \n        if (sample < this.shiftSize) \n          fftWindowInput[channel][sample] = this.lastInput[channel][sample];\n        else if (sample < this.shiftSize + inputData.length) \n          fftWindowInput[channel][sample] = inputData[sample - this.shiftSize];\n        else fftWindowInput[channel][sample] = 0;\n      }\n\n      for (let sample = 0; sample < this.shiftSize; sample++) \n        this.lastInput[channel][sample] \n          = fftWindowInput[channel][this.shiftSize + sample];\n\n    } // end for channel\n\n    let fftObj = this.calcFFT(fftWindowInput);\n    // fftObj is null until the buffer has 17 fftObj's\n\n// decode FFT\n    let pcmData = []; // this.shiftSize*2  \n\n//    let fftCoef = this.justFFT(fftWindowInput); // test\n\n    if (fftObj !== null) {\n      let fftCoef = this.fftFilter(fftObj);\n\n       pcmData[0] = this.rfft.inverse(fftCoef[0]).slice(); \n       pcmData[1] = this.rfft.inverse(fftCoef[1]).slice();\n\n       // console.log(pcmData[0]);\n\n    } else {\n       // console.log ('fftObj is null');\n       pcmData[0] = new Float32Array(this.shiftSize*2 + 2).fill(0);\n       pcmData[1] = new Float32Array(this.shiftSize*2 + 2).fill(0);\n    }\n\n// Add two outputs in overlapped hann window \n    for(let channel = 0; channel <= 1; channel++){\n      let outputData = outputBuffer.getChannelData(channel);\n\n      for (let sample = 0; sample < this.shiftSize; sample++)\n         outputData[sample] = this.lastOut[channel][sample] \n           + pcmData[channel][sample]/(2*this.shiftSize);\n\n      for (let sample = 0; sample < this.shiftSize; sample++)\n         this.lastOut[channel][sample] \n           = pcmData[channel][this.shiftSize + sample]/(2*this.shiftSize);\n      // store latter half of fft inverse output\n\n    }\n\n    return;\n  }\n\n  justFFT (fftWindowInput){\n\n     // console.log(fftWindowInput[0]);\n\n    let fftCoef = [];\n    fftCoef[0] = this.rfft.forward(Windowing.hann(fftWindowInput[0])).slice();\n    fftCoef[1] = this.rfft.forward(Windowing.hann(fftWindowInput[1])).slice();\n\n    return fftCoef;\n  }\n\n  calcFFT (fftWindowInput){\n\n    let fftCoef = [];\n    fftCoef[0] = this.rfft.forward(Windowing.hann(fftWindowInput[0])).slice();\n    fftCoef[1] = this.rfft.forward(Windowing.hann(fftWindowInput[1])).slice();\n    // 0: Left, 1: Right\n\n    let power = [];\n      power[0] = new Float32Array(this.shiftSize+1)\n      power[1] = new Float32Array(this.shiftSize+1)\n    // 0: Left, 1: Right\n    \n    for (let freqBin = 0; freqBin <= this.shiftSize; freqBin++){\n      power[0][freqBin] = fftCoef[0][2*freqBin]* fftCoef[0][2*freqBin]\n               + fftCoef[0][2*freqBin+1]* fftCoef[0][2*freqBin+1]\n      power[1][freqBin] = fftCoef[1][2*freqBin]* fftCoef[1][2*freqBin]\n               + fftCoef[1][2*freqBin+1]* fftCoef[1][2*freqBin+1]\n    }\n\n    let fftObj = { \n      fftCoef: fftCoef,\n      pan:  [],\n      panAmp: [],\n      power: power,\n      percL: [],\n      percR: []\n    };   \n\n    this.calcPan(fftObj);\n\n    this.fftObjBuffer.push(fftObj);\n\n    return this.calcPerc(this.fftObjBuffer); \n\n  } // end calcFFT\n\n  calcPan (fftObj) {\n\n    const fft = fftObj.fftCoef;\n    let numCoef = fft[0].length/2;\n    let pan = new Float32Array(numCoef);\n    let panAmp = new Float32Array(numCoef);\n\n/*\n  Note: frequency-domain data is stored from dc up to 2pi. \n  so cx_out[0] is the dc bin of the FFT and cx_out[nfft/2] is \n  the Nyquist bin (if exists)\n*/\n\n//    console.log('numCoef', numCoef);\n\n    for(let freqBin = 0; freqBin < numCoef; freqBin++){\n\n      let base = 2*freqBin; \n\n      let innerProd = fft[0][base]*fft[1][base]\n                      + fft[0][base+1]*fft[1][base+1]\n\n      let crossProd = fft[0][base]*fft[1][base+1] // Don't forget minus\n                      - fft[0][base+1]*fft[1][base]\n\n      let abs = Math.sqrt(\n         Math.pow(fft[0][base] + fft[1][base],2)\n       + Math.pow(fft[0][base+1] + fft[1][base+1],2)\n      );\n\n      let absL = Math.sqrt( \n          Math.pow(fft[0][base],2) + Math.pow(fft[0][base+1],2));\n      let absR = Math.sqrt(\n          Math.pow(fft[1][base],2) + Math.pow(fft[1][base+1],2));\n\n      let absLR = Math.sqrt(\n        Math.pow(fft[0][base] - fft[1][base],2)\n        + Math.pow(fft[0][base+1] - fft[1][base+1],2)\n      );\n\n      let frac = 0; \n      if (absL < absR){\n        if (innerProd < 0) {\n          frac = 0;\n          panAmp[freqBin] = (absLR - absL)/abs;\n        } else if (innerProd <= absR*absR) {\n          frac = innerProd/(absR*absR); \n          panAmp[freqBin] = Math.max(absL,absLR) - Math.abs(crossProd)/absR; \n        } else {\n          frac = 1;\n          panAmp[freqBin] = absL - absLR;\n        }\n        pan[freqBin] = (1-frac)/(1+frac);\n        // console.log('bin, fracA', freqBin, frac);\n\n      } else { // absL >= absR\n        if (innerProd < 0) {\n          frac = 0;\n          panAmp[freqBin] = (absLR - absR)/abs;\n        } else if (innerProd <= absL*absL) {\n          frac = innerProd/(absL*absL); \n          panAmp[freqBin] = Math.max(absR,absLR) - Math.abs(crossProd)/absL; \n        } else {\n          frac = 1;\n          panAmp[freqBin] = absR - absLR;\n        }\n        pan[freqBin] = (frac-1)/(1+frac);\n      }\n    // console.log('bin, fracB', freqBin, frac);\n\n       if (isNaN(pan[freqBin])) pan[freqBin] = 0;\n       if (isNaN(panAmp[freqBin])) panAmp[freqBin] = 0;\n\n    } // end for freqBin\n\n    fftObj.pan = pan;\n    fftObj.panAmp = panAmp;\n\n    return;\n  }\n\n\n  calcPerc(fftObjBuffer){\n\n    const median = arr => {\n      const mid = Math.floor(arr.length / 2),\n      nums = [...arr].sort((a, b) => a - b);\n      return arr.length % 2 !== 0 ? nums[mid] : (nums[mid - 1] + nums[mid]) / 2;\n    };\n\n    let buflen = fftObjBuffer.length;\n    // console.log ('buflen', buflen);\n\n    if (buflen < 17) return null; // not enough dat\n\n    let percL = new Float32Array(this.shiftSize+1).fill(0.5); // +1 for DC\n    let percR = new Float32Array(this.shiftSize+1).fill(0.5); \n      // also used as power\n\n    const index = 8;\n    const fftObj = fftObjBuffer[index];\n\n    for (let freqBin = 0; freqBin <= this.shiftSize; freqBin++){\n      let from = Math.max(0, freqBin - 9);\n      let to =  Math.min(freqBin + 9, this.shiftSize + 1); // to (not incl.) \n      let pMedianL = median(fftObj.power[0].slice(from,to));\n      let pMedianR = median(fftObj.power[1].slice(from,to));\n\n      let powerArrayL = [];\n      let powerArrayR = [];\n\n      for (let time = 0; time < buflen; time++){ // buflen (max 17)\n        powerArrayL.push(fftObjBuffer[time].power[0][freqBin]);\n        powerArrayR.length = 0;\n        powerArrayR.push(fftObjBuffer[time].power[1][freqBin]);\n      }\n\n      let hMedianL = median(powerArrayL);\n      let hMedianR = median(powerArrayR);\n\n      percL[freqBin] = (pMedianL*pMedianL)/\n         (pMedianL*pMedianL + hMedianL*hMedianL);\n      if (isNaN(percL[freqBin])) percL[freqBin] = 0.5;\n      percR[freqBin] = (pMedianR*pMedianR)/\n         (pMedianR*pMedianR + hMedianR*hMedianR);\n      if (isNaN(percR[freqBin])) percR[freqBin] = 0.5;\n\n    }\n\n    fftObjBuffer[index].percL = percL;\n    fftObjBuffer[index].percR = percR;\n\n    let retval = { \n      fftCoef: [fftObj.fftCoef[0].slice(), fftObj.fftCoef[1].slice()],\n      pan:  fftObj.pan.slice(),\n      panAmp: fftObj.panAmp.slice(),\n      power: [fftObj.power[0].slice(), fftObj.power[1].slice()],\n      perc: [percL.slice(), percR.slice()]\n    };   \n\n    if (buflen >= 17) fftObjBuffer.splice(0,1);\n\n    return retval;\n  }\n\n  fftFilter (fftObj){\n\n    const fftL = fftObj.fftCoef[0];\n    const fftR = fftObj.fftCoef[1];\n    const percL = fftObj.perc[0];\n    const percR = fftObj.perc[1];\n\n    let outL = fftL.slice();\n    let outR = fftR.slice();\n\n    for (let i = 0; i < this.filterChain.length; i++){\n      let filter = this.filterChain[i];\n      let action = filter.action;\n\n      for (let f = filter.fromFreqIndex; f <= filter.toFreqIndex; f++){\n\n        if (fftObj.pan[f] < filter.fromPan \n          || fftObj.pan[f] > filter.toPan) continue;\n\n        switch (action) {\n          case 'T': // original signal\n            outL[2*f] = fftL[2*f]; outL[2*f+1] = fftL[2*f + 1];\n            outR[2*f] = fftR[2*f]; outR[2*f+1] = fftR[2*f + 1];\n          break;\n\n          case 'M': // mute\n            outL[2*f] = outL[2*f+1] = 0; // real, image\n            outR[2*f] = outR[2*f+1] = 0; // real, image\n          break;\n\n          case 'P':\n            outL[2*f] = fftL[2*f]*percL[f];\n            outL[2*f+1] = fftL[2*f+1]*percL[f];\n            outR[2*f] = fftR[2*f]*percR[f]; \n            outR[2*f+1] = fftR[2*f+1]*percR[f];\n          break;\n          case 'H':\n            outL[2*f] = fftL[2*f]*(1-percL[f]);\n            outL[2*f+1] = fftL[2*f+1]*(1-percL[f]);\n            outR[2*f] = fftR[2*f]*(1-percR[f]); \n            outR[2*f+1] = fftR[2*f+1]*(1-percR[f]);\n          break;\n\n          default:\n            console.log('Filter undef action', action);\n        }\n\n      }\n\n    }\n\n    return [outL, outR];\n  }\n\n}\n\nexport default Effector;\n","import React, {Component} from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport packageJSON from '../package.json';\nimport messages from './language.json'; // US and JA message\n// File Saver\nimport * as toWav from 'audiobuffer-to-wav';\nimport {saveAs} from 'file-saver';\n// FFT\n// import {RFFT} from 'fftw-js';\n//import Windowing from 'fft-windowing';\nimport Effector from './effectorClass.js';\n\n// Global variables\nconst version = (packageJSON.homepage + packageJSON.subversion).slice(-11);\nconst jaText = messages.ja;\nconst usText = messages.us;\nvar m = usText; // default\n\nwindow.AudioContext = window.AudioContext || window.webkitAudioContext\nwindow.OfflineAudioContext = window.OfflineAudioContext \n     || window.webkitOfflineAudioContext;\n\nvar audioCtx = null;\nvar gainNode = null;\nvar effector = null;\n\nvar iOS = false;\nif(  navigator.userAgent.match(/iPhone/i) \n  || navigator.userAgent.match(/iPod/i)\n  || navigator.userAgent.match(/iPad/i)){\n  iOS = true;\n}\n\n\n////////////////////////\nclass App extends Component {\n  constructor (props){\n    super(props);\n\n    this.params = {\n      inputAudio: null,\n      outputAudio: null,\n      filename: null,\n      currentSource: null,\n      isPlaying: false,\n      effectNode: null,\n      fftShift: 512,\n      filterType: 'bypass',\n      vocalWidth: 0.2\n    }\n\n    this.counter = 0;\n\n    this.state = {\n      ja: false,\n      playingAt: 0, \n      playVolume: 80,\n      startButtonStr: 'startPlay', // Start/Pause\n      testButtonStr: 'test60sec', // test60sec\n      saveButtonStr: 'Save' // convert all and save/ abort\n    }\n\n    this.loadFile = this.loadFile.bind(this);\n    this.handleLang = this.handleLang.bind(this);\n    this.handleTimeSlider = this.handleTimeSlider.bind(this);\n    this.handleVolumeSlider = this.handleVolumeSlider.bind(this);\n    this.handlePlay = this.handlePlay.bind(this);\n    this.handleOffline = this.handleOffline.bind(this);\n    this.handleSave = this.handleSave.bind(this);\n    this.selectFilter = this.selectFilter.bind(this);\n    this.fakeDownload = this.fakeDownload.bind(this);\n  }\n\n  handleWindowClose(event) { \n    audioCtx.close();\n  }\n\n  componentDidMount () { // after render()\n    audioCtx = new window.AudioContext();\n    gainNode = audioCtx.createGain();\n    window.addEventListener('beforeClosing', this.handleWindowClose);\n  }\n \n    componentWillUnmount () { // before closing app\n    window.removeEventListener('beforeClosing', this.handleWindowClose)\n  }\n\n// GUI \n  render(){\n\n    let duration = 0;\n    if (this.params.inputAudio)\n      duration = this.params.inputAudio.duration;\n\n    let startBStyle = {};\n    if (this.state.startButtonStr === 'Pause') startBStyle = {color: 'green'};\n\n    return(\n      <div className=\"App\">\n       {m.title}\n       <span className='small-button'> &nbsp;&nbsp;\n       <button name='language' onClick={this.handleLang}>\n       {this.state.ja ? 'En(US)' : '日本語'}</button> \n       </span>\n       <hr />\n       Select stereo audio file (from local strage or cloud)<br/>\n       <span className='selectFile'>\n       <input type='file' name='loadFile' \n          accept='audio/*' onChange={this.loadFile} /><br />\n       </span>\n       <hr />\n       <span className='selector'>\n       Filter: &nbsp;\n       <select name='selectFilter' defaultValue='bypass' \n        onChange={this.selectFilter}>\n       <option value='bypass'>bypass</option>\n       <option value='drumCover'>drumCover</option>\n       <option value='karaokeMale'>karaokeMale</option>\n       <option value='karaokeFemale'>karaokeFemale</option>\n       <option value='percussive'>percussive</option>\n       <option value='harmonic'>harmonic</option>\n       <option value='customWithGUI'>customWithGUI</option>\n       </select> \n       &nbsp; vocalWidth: &nbsp;\n       <select name='vocalWidth' defaultValue='0.2' \n        onChange={this.selectFilter}>\n       <option value='0.1'>0.1</option>\n       <option value='0.2'>0.2</option>\n       <option value='0.3'>0.3</option>\n       <option value='0.4'>0.4</option>\n       <option value='0.5'>0.5</option>\n       <option value='0.6'>0.6</option>\n       <option value='0.7'>0.7</option>\n       </select>\n       </span>\n       <hr />\n       Time: {this.state.playingAt.toFixed(2)} <br />\n        <span className='slider'> \n        <center>\n        000 <input type='range' name='timeSlider' min='0' max={duration}\n        value = {this.state.playingAt} step='1'\n        onChange={this.handleTimeSlider} /> &nbsp;\n        {Math.round(duration)}<br />\n        </center>\n        </span>\n       <hr />\n        Vol: {this.state.playVolume} <br />\n        <span className='slider'> \n         <center>\n         000 <input type='range' name='volumeSlider' min='0' max='150'\n         value = {this.state.playVolume} \n           onChange={this.handleVolumeSlider} /> 150<br />\n         </center>\n        </span>\n       <hr />\n       <span>\n       <button name='startPause' onClick={this.handlePlay} \n          style={startBStyle}>{this.state.startButtonStr}\n       </button> &nbsp;&nbsp;\n       <button name='rewind' onClick={this.handlePlay}>Rewind\n       </button> &nbsp;&nbsp;\n       </span>\n       <hr />\n       <span>\n       <button name='testPlay' onClick={this.handleOffline} >\n       testPlay</button> &nbsp;&nbsp;\n       <button name='saveAll' onClick={this.handleOffline}>\n       {this.state.saveButtonStr}</button>\n       </span>\n       <hr />\n        Version: {version}, &nbsp;\n        <a href={m.homepage} \n         target=\"_blank\" rel=\"noopener noreferrer\">{m.guide}</a>\n      </div>\n    );\n  } // end render()\n\n// event handlers\n  loadFile (e) {\n    if (e.target.name !== 'loadFile') return;\n    if (e.target.files.length === 0) return;\n    if (this.params.isPlaying) return;\n\n    let file = e.target.files[0]; \n    this.params.filename = file.name;\n \n    let reader = new FileReader();\n    reader.onload = function(e) {\n      audioCtx.decodeAudioData(reader.result, \n        function(audioBuffer) {\n          this.params.inputAudio = audioBuffer;\n          this.setState({playingAt: 0});\n          this.setState({startButtonStr: 'Play'});\n          effector = new Effector(this.params.fftShift,audioBuffer.sampleRate);\n        }.bind(this),\n          function (error) { console.log (\"Filereader error: \" + error.err) \n        }\n      );\n\n    }.bind(this);\n\n    reader.readAsArrayBuffer(file);\n\n  }\n\n  handleLang(e){\n    if (e.target.name !== 'language') return;\n\n    if (this.state.ja) {\n      m = usText; this.setState({ja: false}); \n    } else {\n      m = jaText; this.setState({ja: true}); \n    }\n  }\n\n  handleVolumeSlider(e){\n    if (e.target.name !== 'volumeSlider') return;\n\n    let vol = parseInt(e.target.value);\n    gainNode.gain.value = vol/100.0;\n    this.setState({playVolume: vol});\n    return;\n  }\n\n  handleTimeSlider(e){\n    if (this.params.isPlaying) return;\n\n    if (e.target.name !== 'timeSlider') return;\n\n    this.setState({playingAt: parseFloat(e.target.value)});\n  }\n\n  handlePlay(e){\n    let source = null;\n\n    if (e.target.name === 'startPause'){\n\n      if (this.state.startButtonStr === 'Play'){ \n\n       if (this.params.isPlaying \n          || this.params.inputAudio.numberOfChannels !== 2) return;\n\n       this.params.isPlaying = true;\n\n// unlock iOS\n       if(iOS) {\n         let buffer = audioCtx.createBuffer(1,1,44100); \n         source = audioCtx.createBufferSource();\n         source.buffer = buffer;\n         source.connect (audioCtx.destination);\n         source.start();\n       } \n// End unlock iOS\n\n// Playing\n       source = audioCtx.createBufferSource();\n       this.params.currentSource = source;\n\n       // add 0.5 sec (sampleRate/2) at the beginning and the end\n       let original = this.params.inputAudio;\n       let modified = audioCtx.createBuffer(\n           original.numberOfChannels, \n           original.length + original.sampleRate,\n           original.sampleRate\n       ); \n\n       for (let channel = 0; channel < modified.numberOfChannels; channel++){\n         let from = original.getChannelData(channel);\n         let to = modified.getChannelData(channel);\n         for (let sample = 0; sample < modified.sampleRate/2; sample++) \n            to[sample] = 0;\n         for (let sample = modified.sampleRate/2; \n            sample < original.length; sample++) \n            to[sample] = from[sample - modified.sampleRate/2];\n         for (let sample = original.length; sample < modified.length; sample++)\n            to[sample] = 0; \n       }\n\n       source.buffer = modified;\n\n// Create effectNode\n       let effectNode;\n       let channels = this.params.inputAudio.numberOfChannels;\n       let bufferSize = this.params.fftShift; // 1024 window half step\n\n       if (audioCtx.createJavaScriptNode) {\n          effectNode \n           = audioCtx.createJavaScriptNode(bufferSize,channels,channels);\n          console.log ('createJavaScriptNode');\n       } else if (audioCtx.createScriptProcessor) {\n         effectNode = audioCtx.createScriptProcessor(bufferSize, \n          channels,channels);\n          console.log ('createScriptProcessor');\n        } // end if audioCtx\n        this.params.effectNode = effectNode;\n\n\n// Connect\n        source.connect(effectNode)\n        effectNode.connect(gainNode);\n        gainNode.connect(audioCtx.destination);\n        source.start(0,this.state.playingAt);\n\n// test filters (GUI)\n//        effector.addFilter(-1,0,1,40000,'M');\n//        effector.addFilter(-0.2,300,0.2,40000,'M');\n//        effector.addFilter(-1,0,1,40000,'P');\n//        effector.addFilter(-1,0,1,40000,'H');\n//        effector.presetFilter('karaokeMale');\n//        effector.presetFilter('drumCover');\n//        effector.presetFilter('percussive');\n//        effector.presetFilter('harmonic');\n//        effector.presetFilter('bypass');\n\n        this.params.outputAudio =  audioCtx.createBuffer(\n          modified.numberOfChannels, modified.length, modified.sampleRate);\n\n        this.counter = 0;\n        effectNode.onaudioprocess = function(e) {\n\n          let inputBuffer = e.inputBuffer;\n          let outputBuffer = e.outputBuffer;\n\n//          effector.copy(inputBuffer, outputBuffer); // for test\n          effector.process(inputBuffer, outputBuffer);\n// save data\n         let leftOut = outputBuffer.getChannelData(0);\n         let rightOut = outputBuffer.getChannelData(1);\n         let processedLeft = this.params.outputAudio.getChannelData(0);\n         let processedRight = this.params.outputAudio.getChannelData(1);\n\n         for (let sample = 0; sample < this.params.fftShift; sample++){\n           let offset = this.counter*this.params.fftShift;\n           processedLeft[offset + sample] = leftOut[sample];\n           processedRight[offset + sample] = rightOut[sample];\n         }\n\n\n         if (this.state.playingAt*inputBuffer.sampleRate >= modified.length){\n            source.stop();\n            effectNode.disconnect();\n            effectNode.onaudioprocess = null;\n            effector = null;\n            this.fakeDownload(this.params.outputAudio);\n            return;\n          }\n\n          this.counter++;\n          let update = 20;\n          if (this.counter % update === 0) { \n             this.setState({playingAt: this.state.playingAt \n             + (update*inputBuffer.length)/inputBuffer.sampleRate});\n          }\n\n\n          return; \n        }.bind(this) // end onaudioprocess function(e)\n\n        this.setState({startButtonStr: 'Pause'});\n\n        return;\n      } // end Play\n\n      if (this.state.startButtonStr === 'Pause'){\n\n        if (!this.params.isPlaying) return;\n\n        this.params.currentSource.disconnect();\n        this.params.effectNode.disconnect();\n        this.params.effectNode.onaudioprrocess = null;\n        gainNode.disconnect();\n        this.params.currentSource.stop();\n        this.setState({startButtonStr: 'Play'});\n        this.params.isPlaying = false;\n\n        return;\n      } // end Pause\n\n    } // end startPause\n\n    if (e.target.name === 'rewind') {\n      if (this.params.isPlaying) return;\n      this.setState({playingAt: 0});\n      return;\n    }\n\n  } // end handlePlay()\n\n\n  selectFilter(e){\n\n    if (e.target.name === 'selectFilter' && effector !== null) {\n\n      switch(e.target.value){\n        case 'drumCover': \n        case 'karaokeMale': \n        case 'karaokeFemale': \n          effector.presetFilter(e.target.value, this.params.vocalWidth);\n        break;\n        case 'percussive': case 'harmonic':\n          effector.presetFilter(e.target.value, 0);\n        break;\n        case 'bypass': \n        case 'customWithGUI': \n          effector.presetFilter('bypass', 0);\n        break; // customWithGUI not implemented\n        default:\n      }\n      this.params.filterType = e.target.value;\n    } \n\n    if (e.target.name === 'vocalWidth' \n       && effector !== null && this.params.filterType !== null) {\n       this.params.vocalWidth = parseFloat(e.target.value);\n       effector.presetFilter(this.params.filterType, this.params.vocalWidth);\n    }\n\n  }\n\n  handleOffline(e){\n\n    if (e.target.name === 'testPlay') {\n\n      let offlineCtx = new OfflineAudioContext(\n        this.params.inputAudio.numberOfChannels, \n        this.params.inputAudio.length, \n        this.params.inputAudio.sampleRate\n      );\n\n      let source = offlineCtx.createBufferSource();     \n      source.buffer = this.params.inputAudio;\n      let effectNode \n         = offlineCtx.createScriptProcessor(512,2,0);\n      source.connect(effectNode);\n      effectNode.connect(offlineCtx.destination);\n\n/* To store the result */\n      let output \n        = audioCtx.createBuffer(2, this.params.inputAudio.length, \n          this.params.inputAudio.sampleRate);\n      let leftOut = output.getChannelData(0);\n      let rightOut = output.getChannelData(1);\n\n      let offset = 0;\n      effectNode.onaudioprocess = function(e) {\n         let input = e.inputBuffer; // input is OK\n         let leftIn = input.getChannelData(0);\n         let rightIn = input.getChannelData(1);\n     \n         // let output = e.outputBuffer; // does not work as expected\n         let processed = audioCtx.createBuffer(2,input.length,input.sampleRate);\n         effector.process(input,processed);\n         let processedL = processed.getChannelData(0);\n         let processedR = processed.getChannelData(1);\n\n         for (let i = 0; i < input.length; i++){\n            leftOut[offset + i] = processedL[i]; \n            rightOut[offset + i] = processedR[i];\n         }\n\n         if (offset/512 % 20 === 0)  \n            this.setState({playingAt: offset/input.sampleRate});\n\n         offset += 512;\n\n      }.bind(this);\n\n      source.start();\n      offlineCtx.startRendering();\n      offlineCtx.oncomplete = function(e) {\n        // e.renderedBuffer; // useless (bug?)\n        let source = audioCtx.createBufferSource();\n        source.buffer = output;\n        source.connect(gainNode); \n        gainNode.connect(audioCtx.destination);\n        source.start();\n        // this.fakeDownload(output);\n      }.bind(this);\n\n   } // end if testPlay\n\n  } \n\n  handleSave(e){ // offline processing (may work for this)\n    if (this.params.outputAudio !== null)\n      this.fakeDownload(this.params.outputAudio);\n  } // end handleSave\n\n  fakeDownload(audioBuffer){\n\n    const words = this.params.filename.split('.');\n    let outFileName = words[0] + '-modified.wav';\n    let blob = new Blob([toWav(audioBuffer)], {type: 'audio/vnd.wav'});\n    saveAs(blob,outFileName);\n\n  } // end fakeDownload\n \n} // end class\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}